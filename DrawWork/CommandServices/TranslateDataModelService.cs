using AssemblyLib.AssemblyModels;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace DrawWork.CommandServices{	public class TranslateDataModelService	{		public AssemblyModel assemblyData;				#region assemblyData		public void SetAssemblyData(AssemblyModel selAssembly)		{			assemblyData= selAssembly;		}		#endregion		#region Translate Model Main Switch		public string GetTranslateModelSwitch(string selUsingStr, string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selUsingStr)			{				case "generaldd":				case "generaldesigndata":					result = GetTMSGeneralDesignData(selCmdStr,selCmdNew,selCmdIndex);					break;				case "generalcw":				case "generalcapacityweight":					result = GetTMSGeneralCapacityWeight(selCmdStr,selCmdNew,selCmdIndex);					break;				case "generalmasfab":				case "generalmomentandshearforceatbase":					result = GetTMSGeneralMomentAndShearForceAtBase(selCmdStr,selCmdNew,selCmdIndex);					break;				case "generalms":				case "generalmaterialspecs":					result = GetTMSGeneralMaterialSpecs(selCmdStr,selCmdNew,selCmdIndex);					break;				case "generalca":				case "generalcorrosionallowance":					result = GetTMSGeneralCorrosionAllowance(selCmdStr,selCmdNew,selCmdIndex);					break;				case "generale":				case "generalearquake":					result = GetTMSGeneralEarquake(selCmdStr,selCmdNew,selCmdIndex);					break;				case "shellin":				case "shellinput":					result = GetTMSShellInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "shellout":				case "shelloutput":					result = GetTMSShellOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "roofin":				case "roofinput":					result = GetTMSRoofInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "roofout":				case "roofoutput":					result = GetTMSRoofOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "bottomin":				case "bottominput":					result = GetTMSBottomInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "bottomout":				case "bottomoutput":					result = GetTMSBottomOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "nozzlein":				case "nozzleinputmodel":					result = GetTMSNozzleInputModel(selCmdStr,selCmdNew,selCmdIndex);					break;				case "windgirderin":				case "windgirderinput":					result = GetTMSWindGirderInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "windgirderout":				case "windgirderoutput":					result = GetTMSWindGirderOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "insulation":				case "insulationinput":					result = GetTMSInsulationInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "roofangleout":				case "roofangleoutput":					result = GetTMSRoofAngleOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "angle":				case "angleilist":					result = GetTMSAngleIList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structurein":				case "structureinput":					result = GetTMSStructureInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "strucutrecolumnin":				case "structurecolumninput":					result = GetTMSStructureColumnInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structurerafterin":				case "structurerafterinput":					result = GetTMSStructureRafterInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structuregirderin":				case "structuregirderinput":					result = GetTMSStructureGirderInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structurecenterringin":				case "structurecenterringinput":					result = GetTMSStructureCenterRingInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnrafterout":				case "structurecolumnrafteroutput":					result = GetTMSStructureColumnRafterOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnsideout":				case "structurecolumnsideoutput":					result = GetTMSStructureColumnSideOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnbasesupportout":				case "structurecolumnbasesupportoutput":					result = GetTMSStructureColumnBaseSupportOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columncenterout":				case "structurecolumncenteroutput":					result = GetTMSStructureColumnCenterOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnclipshellsideout":				case "structurecolumnclipshellsideoutput":					result = GetTMSStructureColumnClipShellSideOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnchannelout":				case "structurecolumnchanneloutput":					result = GetTMSStructureColumnChannelOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnhbeamout":				case "structurecolumnhbeamoutput":					result = GetTMSStructureColumnHBeamOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnpipeout":				case "structurecolumnpipeoutput":					result = GetTMSStructureColumnPipeOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnclipslotholeout":				case "structureclipslotholeoutput":					result = GetTMSStructureClipSlotHoleOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnrafter":				case "structurecolumnrafter":					result = GetTMSStructureColumnRafter(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnside":				case "structurecolumnside":					result = GetTMSStructureColumnSide(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnbasesupport":				case "structurecolumnbasesupport":					result = GetTMSStructureColumnBaseSupport(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columncenter":				case "structurecolumncenter":					result = GetTMSStructureColumnCenter(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columnclipshellside":				case "structurecolumnclipshellside":					result = GetTMSStructureColumnClipShellSide(selCmdStr,selCmdNew,selCmdIndex);					break;				case "channel":				case "channellist":					result = GetTMSChannelList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "hbeam":				case "hbeamlist":					result = GetTMSHBeamList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "pipe":				case "pipelist":					result = GetTMSPipeList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "clipslophole":				case "clipslotholelist":					result = GetTMSClipSlotHoleList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "nozzleetc":				case "nozzleetclist":					result = GetTMSNozzleEtcList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "nozzleohf":				case "nozzleohflist":					result = GetTMSNozzleOHFList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "nozzleth":				case "nozzlethlist":					result = GetTMSNozzleTHList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "nozzleohfa":				case "nozzleohfseriesalist":					result = GetTMSNozzleOHFSeriesAList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "nozzletha":				case "nozzlethseriesaist":					result = GetTMSNozzleTHSeriesAist(selCmdStr,selCmdNew,selCmdIndex);					break;				case "nozzleohfb":				case "nozzleohfseriesblist":					result = GetTMSNozzleOHFSeriesBList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "nozzlethb":				case "nozzlethseriesbist":					result = GetTMSNozzleTHSeriesBist(selCmdStr,selCmdNew,selCmdIndex);					break;				case "nozzleohflwn":				case "nozzleohflwnlist":					result = GetTMSNozzleOHFLWNList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "nozzlethlwn":				case "nozzlethlwnlist":					result = GetTMSNozzleTHLWNList(selCmdStr,selCmdNew,selCmdIndex);					break;				default:					result = "nothing";					break;			}			return result;		}		#endregion		#region Translate Model Each Switch		private string GetTMSGeneralDesignData(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "appliedcode":					result = assemblyData.GeneralDesignData.AppliedCode;					break;				case "shelldesign":					result = assemblyData.GeneralDesignData.ShellDesign;					break;				case "roofdesign":					result = assemblyData.GeneralDesignData.RoofDesign;					break;				case "contents":					result = assemblyData.GeneralDesignData.Contents;					break;				case "designspecgr":					result = assemblyData.GeneralDesignData.DesignSpecGr;					break;				case "measurementunit":					result = assemblyData.GeneralDesignData.MeasurementUnit;					break;				case "rooftype":					result = assemblyData.GeneralDesignData.RoofType;					break;				case "sizenominalid":					result = assemblyData.GeneralDesignData.SizeNominalId;					break;				case "sizetankheight":					result = assemblyData.GeneralDesignData.SizeTankHeight;					break;				case "platewidth":					result = assemblyData.GeneralDesignData.PlateWidth;					break;				case "platemaxlength":					result = assemblyData.GeneralDesignData.PlateMaxLength;					break;				case "pumpingratesin":					result = assemblyData.GeneralDesignData.PumpingRatesIn;					break;				case "pumpingratesout":					result = assemblyData.GeneralDesignData.PumpingRatesOut;					break;				case "opertempmin":					result = assemblyData.GeneralDesignData.OperTempMin;					break;				case "opertempnor":					result = assemblyData.GeneralDesignData.OperTempNor;					break;				case "opertempmax":					result = assemblyData.GeneralDesignData.OperTempMax;					break;				case "designtempmin":					result = assemblyData.GeneralDesignData.DesignTempMin;					break;				case "designtempmax":					result = assemblyData.GeneralDesignData.DesignTempMax;					break;				case "operpressint":					result = assemblyData.GeneralDesignData.OperPressInt;					break;				case "operpressext":					result = assemblyData.GeneralDesignData.OperPressExt;					break;				case "designpressint":					result = assemblyData.GeneralDesignData.DesignPressInt;					break;				case "designpressext":					result = assemblyData.GeneralDesignData.DesignPressExt;					break;				case "vaporpressuremax":					result = assemblyData.GeneralDesignData.VaporPressureMax;					break;				case "setpressureemergencycovermanhole":					result = assemblyData.GeneralDesignData.SetPressureEmergencyCoverManhole;					break;				case "setpressurebreathervalve":					result = assemblyData.GeneralDesignData.SetPressureBreatherValve;					break;				case "setpressurebreathervalvevac":					result = assemblyData.GeneralDesignData.SetPressureBreatherValveVac;					break;				case "testspgr":					result = assemblyData.GeneralDesignData.TestSpGr;					break;				case "roofloadsuniformlive":					result = assemblyData.GeneralDesignData.RoofLoadsUniformLive;					break;				case "roofloadsspecialloading":					result = assemblyData.GeneralDesignData.RoofLoadsSpecialLoading;					break;				case "windvelocity":					result = assemblyData.GeneralDesignData.WindVelocity;					break;				case "rainfallmax":					result = assemblyData.GeneralDesignData.RainFallMax;					break;				case "snowfalltotalaccumulation":					result = assemblyData.GeneralDesignData.SnowFallTotalAccumulation;					break;				case "foundationtype":					result = assemblyData.GeneralDesignData.FoundationType;					break;				case "insulationshell":					result = assemblyData.GeneralDesignData.InsulationShell;					break;				case "insulationroof":					result = assemblyData.GeneralDesignData.InsulationRoof;					break;				case "mdmt":					result = assemblyData.GeneralDesignData.MDMT;					break;				case "dmt":					result = assemblyData.GeneralDesignData.DMT;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSGeneralCapacityWeight(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "empty":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].Empty;					break;				case "operating":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].Operating;					break;				case "fullofwater":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].FullOfWater;					break;				case "insulation":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].Insulation;					break;				case "platformladder":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].PlatformLadder;					break;				case "others":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].Others;					break;				case "liquid":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].Liquid;					break;				case "paintingareaint":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].PaintingAreaInt;					break;				case "paintingareaext":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].PaintingAreaExt;					break;				case "nominalcapacity":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].NominalCapacity;					break;				case "workingcapacity":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].WorkingCapacity;					break;				case "networkingcapacity":					result = assemblyData.GeneralCapacityWeight[selCmdIndex].NetWorkingCapacity;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSGeneralMomentAndShearForceAtBase(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "windmoment":					result = assemblyData.GeneralMomentAndShearForceAtBase[selCmdIndex].WindMoment;					break;				case "seismicmoment":					result = assemblyData.GeneralMomentAndShearForceAtBase[selCmdIndex].SeismicMoment;					break;				case "shearforceempty":					result = assemblyData.GeneralMomentAndShearForceAtBase[selCmdIndex].ShearForceEmpty;					break;				case "shearforceoperating":					result = assemblyData.GeneralMomentAndShearForceAtBase[selCmdIndex].ShearForceOperating;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSGeneralMaterialSpecs(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "shellplates":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].ShellPlates;					break;				case "padsweldedshell":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].PadsWeldedShell;					break;				case "bottomplates":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].BottomPlates;					break;				case "bottomplatesthickness":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].BottomPlatesThickness;					break;				case "bottomplatesslope":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].BottomPlatesSlope;					break;				case "bottomplatesweldjointtype":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].BottomPlatesWeldJointType;					break;				case "bottomplatesbottomstyle":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].BottomPlatesBottomStyle;					break;				case "roofplates":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].RoofPlates;					break;				case "roofplatesthickness":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].RoofPlatesThickness;					break;				case "roofplatesslope":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].RoofPlatesSlope;					break;				case "roofplatesweldjointtype":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].RoofPlatesWeldJointType;					break;				case "roofplatesconeroofsupport":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].RoofPlatesConeRoofSupport;					break;				case "annularplate":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].AnnularPlate;					break;				case "annularplateminwidth":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].AnnularPlateMinWidth;					break;				case "annularplatethickness":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].AnnularPlateThickness;					break;				case "annularplateweldjointtype":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].AnnularPlateWeldJointType;					break;				case "nozzleneckpipeplate":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].NozzleNeckPipePlate;					break;				case "forgedflangescoverscplg":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].ForgedFlangesCoversCplg;					break;				case "plateflangecovers":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].PlateFlangeCovers;					break;				case "internalsupportsweldedtoshell":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].InternalSupportsWeldedToShell;					break;				case "internalpipe":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].InternalPipe;					break;				case "externallug":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].ExternalLug;					break;				case "boltnut":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].BoltNut;					break;				case "anchorboltnut":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].AnchorBoltNut;					break;				case "gasket":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].Gasket;					break;				case "painting":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].Painting;					break;				case "insulation":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].Insulation;					break;				case "nameplateearthlug":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].NamePlateEarthLug;					break;				case "roofstructure":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].RoofStructure;					break;				case "roofstructurecolumn":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].RoofStructureColumn;					break;				case "platformwalkway":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].PlatformWalkway;					break;				case "internalfloatingroof":					result = assemblyData.GeneralMaterialSpecs[selCmdIndex].InternalFloatingRoof;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSGeneralCorrosionAllowance(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "shellplate":					result = assemblyData.GeneralCorrosionAllowance[selCmdIndex].ShellPlate;					break;				case "roofplate":					result = assemblyData.GeneralCorrosionAllowance[selCmdIndex].RoofPlate;					break;				case "bottomplate":					result = assemblyData.GeneralCorrosionAllowance[selCmdIndex].BottomPlate;					break;				case "nozzle":					result = assemblyData.GeneralCorrosionAllowance[selCmdIndex].Nozzle;					break;				case "structureeachside":					result = assemblyData.GeneralCorrosionAllowance[selCmdIndex].StructureEachSide;					break;				case "column":					result = assemblyData.GeneralCorrosionAllowance[selCmdIndex].Column;					break;				case "annularplate":					result = assemblyData.GeneralCorrosionAllowance[selCmdIndex].AnnularPlate;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSGeneralEarquake(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "seismiczone":					result = assemblyData.GeneralEarquake[selCmdIndex].SeismicZone;					break;				case "seismiczonefactor":					result = assemblyData.GeneralEarquake[selCmdIndex].SeismicZoneFactor;					break;				case "sitecoefficient":					result = assemblyData.GeneralEarquake[selCmdIndex].SiteCoefficient;					break;				case "sone":					result = assemblyData.GeneralEarquake[selCmdIndex].SOne;					break;				case "siteclass":					result = assemblyData.GeneralEarquake[selCmdIndex].SiteClass;					break;				case "usegroup":					result = assemblyData.GeneralEarquake[selCmdIndex].UseGroup;					break;				case "importancefactor":					result = assemblyData.GeneralEarquake[selCmdIndex].ImportanceFactor;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSShellInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "caos":				case "caofshell":					result = assemblyData.ShellInput[selCmdIndex].CAOfShell;					break;				case "cc":				case "coursecount":					result = assemblyData.ShellInput[selCmdIndex].CourseCount;					break;				case "pc":				case "platecnt":					result = assemblyData.ShellInput[selCmdIndex].PlateCnt;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSShellOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "courseno":					result = assemblyData.ShellOutput[selCmdIndex].CourseNo;					break;				case "minthk":					result = assemblyData.ShellOutput[selCmdIndex].MinThk;					break;				case "startpoint":					result = assemblyData.ShellOutput[selCmdIndex].StartPoint;					break;				case "width":					result = assemblyData.ShellOutput[selCmdIndex].Width;					break;				case "length":					result = assemblyData.ShellOutput[selCmdIndex].Length;					break;				case "repeatno":					result = assemblyData.ShellOutput[selCmdIndex].RepeatNo;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSRoofInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "roofslopeone":					result = assemblyData.RoofInput[selCmdIndex].RoofSlopeOne;					break;				case "roofthickness":					result = assemblyData.RoofInput[selCmdIndex].RoofThickness;					break;				case "caofroof":					result = assemblyData.RoofInput[selCmdIndex].CAOfRoof;					break;				case "topangletype":					result = assemblyData.RoofInput[selCmdIndex].TopAngleType;					break;				case "topanglesize":					result = assemblyData.RoofInput[selCmdIndex].TopAngleSize;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSRoofOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "shellthk":					result = assemblyData.RoofOutput[selCmdIndex].ShellThk;					break;				case "twotcmax":					result = assemblyData.RoofOutput[selCmdIndex].TwoTcMax;					break;				case "anglesize":					result = assemblyData.RoofOutput[selCmdIndex].AngleSize;					break;				case "anglethk":					result = assemblyData.RoofOutput[selCmdIndex].AngleThk;					break;				case "b":					result = assemblyData.RoofOutput[selCmdIndex].B;					break;				case "roofangle":					result = assemblyData.RoofOutput[selCmdIndex].RoofAngle;					break;				case "roofthk":					result = assemblyData.RoofOutput[selCmdIndex].RoofThk;					break;				case "wcstartpoint":					result = assemblyData.RoofOutput[selCmdIndex].WcStartPoint;					break;				case "wc":					result = assemblyData.RoofOutput[selCmdIndex].Wc;					break;				case "twotsortwotbmax":					result = assemblyData.RoofOutput[selCmdIndex].TwoTsOrTwoTbMax;					break;				case "ringwidth":					result = assemblyData.RoofOutput[selCmdIndex].RingWidth;					break;				case "ringthk":					result = assemblyData.RoofOutput[selCmdIndex].RingThk;					break;				case "comprringwidth":					result = assemblyData.RoofOutput[selCmdIndex].ComprRingWidth;					break;				case "outsideprojection":					result = assemblyData.RoofOutput[selCmdIndex].OutsideProjection;					break;				case "overlapofroof":					result = assemblyData.RoofOutput[selCmdIndex].OverlapOfRoof;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSBottomInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "bottomslope":					result = assemblyData.BottomInput[selCmdIndex].BottomSlope;					break;				case "bottomthickness":					result = assemblyData.BottomInput[selCmdIndex].BottomThickness;					break;				case "annularplatereqd":					result = assemblyData.BottomInput[selCmdIndex].AnnularPlateReqd;					break;				case "annularplatewidth":					result = assemblyData.BottomInput[selCmdIndex].AnnularPlateWidth;					break;				case "annularplatethickness":					result = assemblyData.BottomInput[selCmdIndex].AnnularPlateThickness;					break;				case "annularplatetype":					result = assemblyData.BottomInput[selCmdIndex].AnnularPlateType;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSBottomOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "shellthk":					result = assemblyData.BottomOutput[selCmdIndex].ShellThk;					break;				case "outsideprojection":					result = assemblyData.BottomOutput[selCmdIndex].OutSideProjection;					break;				case "insideprojection":					result = assemblyData.BottomOutput[selCmdIndex].InsideProjection;					break;				case "odtwo":					result = assemblyData.BottomOutput[selCmdIndex].ODTwo;					break;				case "bottomslopangle":					result = assemblyData.BottomOutput[selCmdIndex].BottomSlopAngle;					break;				case "overlapofannular":					result = assemblyData.BottomOutput[selCmdIndex].OverlapOfAnnular;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNozzleInputModel(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "position":					result = assemblyData.NozzleInputModel[selCmdIndex].Position;					break;				case "lr":					result = assemblyData.NozzleInputModel[selCmdIndex].LR;					break;				case "mark":					result = assemblyData.NozzleInputModel[selCmdIndex].Mark;					break;				case "size":					result = assemblyData.NozzleInputModel[selCmdIndex].Size;					break;				case "sch":					result = assemblyData.NozzleInputModel[selCmdIndex].SCH;					break;				case "qty":					result = assemblyData.NozzleInputModel[selCmdIndex].Qty;					break;				case "flange":					result = assemblyData.NozzleInputModel[selCmdIndex].Flange;					break;				case "rating":					result = assemblyData.NozzleInputModel[selCmdIndex].Rating;					break;				case "type":					result = assemblyData.NozzleInputModel[selCmdIndex].Type;					break;				case "facing":					result = assemblyData.NozzleInputModel[selCmdIndex].Facing;					break;				case "r":					result = assemblyData.NozzleInputModel[selCmdIndex].R;					break;				case "h":					result = assemblyData.NozzleInputModel[selCmdIndex].H;					break;				case "ort":					result = assemblyData.NozzleInputModel[selCmdIndex].Ort;					break;				case "attachedtype":					result = assemblyData.NozzleInputModel[selCmdIndex].AttachedType;					break;				case "tiltangle":					result = assemblyData.NozzleInputModel[selCmdIndex].TiltAngle;					break;				case "offsettocl":					result = assemblyData.NozzleInputModel[selCmdIndex].OffsetToCL;					break;				case "description":					result = assemblyData.NozzleInputModel[selCmdIndex].Description;					break;				case "remarks":					result = assemblyData.NozzleInputModel[selCmdIndex].Remarks;					break;				case "jointtype":					result = assemblyData.NozzleInputModel[selCmdIndex].JointType;					break;				case "fitting":					result = assemblyData.NozzleInputModel[selCmdIndex].Fitting;					break;				case "reinforcingpadtype":					result = assemblyData.NozzleInputModel[selCmdIndex].ReinforcingPadType;					break;				case "inletoutlet":					result = assemblyData.NozzleInputModel[selCmdIndex].InletOutlet;					break;				case "interal":					result = assemblyData.NozzleInputModel[selCmdIndex].Interal;					break;				case "sump":					result = assemblyData.NozzleInputModel[selCmdIndex].Sump;					break;				case "otherflange":					result = assemblyData.NozzleInputModel[selCmdIndex].OtherFlange;					break;				case "hrsort":					result = assemblyData.NozzleInputModel[selCmdIndex].HRSort.ToString();					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSWindGirderInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankheight":					result = assemblyData.WindGirderInput[selCmdIndex].TankHeight;					break;				case "shellcourseno":					result = assemblyData.WindGirderInput[selCmdIndex].ShellCourseNo;					break;				case "stiffenertype":					result = assemblyData.WindGirderInput[selCmdIndex].StiffenerType;					break;				case "qty":					result = assemblyData.WindGirderInput[selCmdIndex].Qty;					break;				case "elevation1":					result = assemblyData.WindGirderInput[selCmdIndex].Elevation1;					break;				case "elevation2":					result = assemblyData.WindGirderInput[selCmdIndex].Elevation2;					break;				case "elevation3":					result = assemblyData.WindGirderInput[selCmdIndex].Elevation3;					break;				case "size1":					result = assemblyData.WindGirderInput[selCmdIndex].Size1;					break;				case "size2":					result = assemblyData.WindGirderInput[selCmdIndex].Size2;					break;				case "size3":					result = assemblyData.WindGirderInput[selCmdIndex].Size3;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSWindGirderOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "windgirderno":					result = assemblyData.WindGirderOutput[selCmdIndex].WindGirderNo;					break;				case "windgirderelevation":					result = assemblyData.WindGirderOutput[selCmdIndex].WindGirderElevation;					break;				case "shellcourseno":					result = assemblyData.WindGirderOutput[selCmdIndex].ShellCourseNo;					break;				case "shellthk":					result = assemblyData.WindGirderOutput[selCmdIndex].ShellThk;					break;				case "anglesize":					result = assemblyData.WindGirderOutput[selCmdIndex].AngleSize;					break;				case "anglethik":					result = assemblyData.WindGirderOutput[selCmdIndex].AngleThik;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSInsulationInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "shellinsulationrequired":					result = assemblyData.InsulationInput[selCmdIndex].ShellInsulationRequired;					break;				case "shellinsulationthickness":					result = assemblyData.InsulationInput[selCmdIndex].ShellInsulationThickness;					break;				case "roofinsulationrequired":					result = assemblyData.InsulationInput[selCmdIndex].RoofInsulationRequired;					break;				case "roofinsulationthickness":					result = assemblyData.InsulationInput[selCmdIndex].RoofInsulationThickness;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSRoofAngleOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.RoofAngleOutput[selCmdIndex].SIZE;					break;				case "ab":					result = assemblyData.RoofAngleOutput[selCmdIndex].AB;					break;				case "t":					result = assemblyData.RoofAngleOutput[selCmdIndex].t;					break;				case "r1":					result = assemblyData.RoofAngleOutput[selCmdIndex].R1;					break;				case "r2":					result = assemblyData.RoofAngleOutput[selCmdIndex].R2;					break;				case "cd":					result = assemblyData.RoofAngleOutput[selCmdIndex].CD;					break;				case "e":					result = assemblyData.RoofAngleOutput[selCmdIndex].E;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSAngleIList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.AngleIList[selCmdIndex].SIZE;					break;				case "ab":					result = assemblyData.AngleIList[selCmdIndex].AB;					break;				case "t":					result = assemblyData.AngleIList[selCmdIndex].t;					break;				case "r1":					result = assemblyData.AngleIList[selCmdIndex].R1;					break;				case "r2":					result = assemblyData.AngleIList[selCmdIndex].R2;					break;				case "cd":					result = assemblyData.AngleIList[selCmdIndex].CD;					break;				case "e":					result = assemblyData.AngleIList[selCmdIndex].E;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "supportingtype":					result = assemblyData.StructureInput[selCmdIndex].SupportingType;					break;				case "columnshape":					result = assemblyData.StructureInput[selCmdIndex].ColumnShape;					break;				case "columnno":					result = assemblyData.StructureInput[selCmdIndex].ColumnNo;					break;				case "raftermaterial":					result = assemblyData.StructureInput[selCmdIndex].RafterMaterial;					break;				case "raftertype":					result = assemblyData.StructureInput[selCmdIndex].RafterType;					break;				case "raftersize":					result = assemblyData.StructureInput[selCmdIndex].RafterSize;					break;				case "raftertotalqty":					result = assemblyData.StructureInput[selCmdIndex].RafterTotalQty;					break;				case "girdersize":					result = assemblyData.StructureInput[selCmdIndex].GirderSize;					break;				case "centerringod":					result = assemblyData.StructureInput[selCmdIndex].CenterRingOD;					break;				case "centerringid":					result = assemblyData.StructureInput[selCmdIndex].CenterRingID;					break;				case "centerringheight":					result = assemblyData.StructureInput[selCmdIndex].CenterRingHeight;					break;				case "centerringthickness":					result = assemblyData.StructureInput[selCmdIndex].CenterRingThickness;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "columninno":					result = assemblyData.StructureColumnInput[selCmdIndex].ColumnInNo;					break;				case "columninsize":					result = assemblyData.StructureColumnInput[selCmdIndex].ColumnInSize;					break;				case "columninqty":					result = assemblyData.StructureColumnInput[selCmdIndex].ColumnInQty;					break;				case "columninradius":					result = assemblyData.StructureColumnInput[selCmdIndex].ColumnInRadius;					break;				case "columninschedule":					result = assemblyData.StructureColumnInput[selCmdIndex].ColumnInSchedule;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureRafterInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "rafterinno":					result = assemblyData.StructureRafterInput[selCmdIndex].RafterInNo;					break;				case "rafterinsize":					result = assemblyData.StructureRafterInput[selCmdIndex].RafterInSize;					break;				case "rafterinqty":					result = assemblyData.StructureRafterInput[selCmdIndex].RafterInQty;					break;				case "rafterinradius":					result = assemblyData.StructureRafterInput[selCmdIndex].RafterInRadius;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureGirderInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "girderinno":					result = assemblyData.StructureGirderInput[selCmdIndex].GirderInNo;					break;				case "girderinsize":					result = assemblyData.StructureGirderInput[selCmdIndex].GirderInSize;					break;				case "girderinqty":					result = assemblyData.StructureGirderInput[selCmdIndex].GirderInQty;					break;				case "girderinradius":					result = assemblyData.StructureGirderInput[selCmdIndex].GirderInRadius;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCenterRingInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "centerringinno":					result = assemblyData.StructureCenterRingInput[selCmdIndex].CenterRingInNo;					break;				case "centerringinsize":					result = assemblyData.StructureCenterRingInput[selCmdIndex].CenterRingInSize;					break;				case "centerringinqty":					result = assemblyData.StructureCenterRingInput[selCmdIndex].CenterRingInQty;					break;				case "centerringinradius":					result = assemblyData.StructureCenterRingInput[selCmdIndex].CenterRingInRadius;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnRafterOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].SIZE;					break;				case "rafter1":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].Rafter1;					break;				case "rafter2":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].Rafter2;					break;				case "rafter3":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].Rafter3;					break;				case "rafter4":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].Rafter4;					break;				case "rafter5":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].Rafter5;					break;				case "rafter6":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].Rafter6;					break;				case "a":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].E;					break;				case "boltholeonshell":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].BoltHoleOnShell;					break;				case "boltholeoncolumn":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].BoltHoleOnColumn;					break;				case "boltholeoncenter":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].BoltHoleOnCenter;					break;				case "boltholedia":					result = assemblyData.StructureColumnRafterOutput[selCmdIndex].BoltHoleDia;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnSideOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureColumnSideOutput[selCmdIndex].SIZE;					break;				case "a1a2":					result = assemblyData.StructureColumnSideOutput[selCmdIndex].A1A2;					break;				case "b":					result = assemblyData.StructureColumnSideOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureColumnSideOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureColumnSideOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureColumnSideOutput[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureColumnSideOutput[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureColumnSideOutput[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureColumnSideOutput[selCmdIndex].H;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnBaseSupportOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "a":					result = assemblyData.StructureColumnBaseSupportOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureColumnBaseSupportOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureColumnBaseSupportOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureColumnBaseSupportOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureColumnBaseSupportOutput[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureColumnBaseSupportOutput[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureColumnBaseSupportOutput[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureColumnBaseSupportOutput[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureColumnBaseSupportOutput[selCmdIndex].I;					break;				case "j":					result = assemblyData.StructureColumnBaseSupportOutput[selCmdIndex].J;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnCenterOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "column":					result = assemblyData.StructureColumnCenterOutput[selCmdIndex].COLUMN;					break;				case "size":					result = assemblyData.StructureColumnCenterOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureColumnCenterOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureColumnCenterOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureColumnCenterOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureColumnCenterOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureColumnCenterOutput[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureColumnCenterOutput[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureColumnCenterOutput[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureColumnCenterOutput[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureColumnCenterOutput[selCmdIndex].I;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnClipShellSideOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureColumnClipShellSideOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureColumnClipShellSideOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureColumnClipShellSideOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureColumnClipShellSideOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureColumnClipShellSideOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureColumnClipShellSideOutput[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureColumnClipShellSideOutput[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureColumnClipShellSideOutput[selCmdIndex].G;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnChannelOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureColumnChannelOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureColumnChannelOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureColumnChannelOutput[selCmdIndex].B;					break;				case "t1":					result = assemblyData.StructureColumnChannelOutput[selCmdIndex].t1;					break;				case "t2":					result = assemblyData.StructureColumnChannelOutput[selCmdIndex].t2;					break;				case "r":					result = assemblyData.StructureColumnChannelOutput[selCmdIndex].R;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnHBeamOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureColumnHBeamOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureColumnHBeamOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureColumnHBeamOutput[selCmdIndex].B;					break;				case "t1":					result = assemblyData.StructureColumnHBeamOutput[selCmdIndex].t1;					break;				case "t2":					result = assemblyData.StructureColumnHBeamOutput[selCmdIndex].t2;					break;				case "r":					result = assemblyData.StructureColumnHBeamOutput[selCmdIndex].R;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnPipeOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "nps":					result = assemblyData.StructureColumnPipeOutput[selCmdIndex].NPS;					break;				case "od":					result = assemblyData.StructureColumnPipeOutput[selCmdIndex].OD;					break;				case "sch5s_thk":					result = assemblyData.StructureColumnPipeOutput[selCmdIndex].SCH5S_THK;					break;				case "sch5s_so":					result = assemblyData.StructureColumnPipeOutput[selCmdIndex].SCH5S_SO;					break;				case "sch10s_thk":					result = assemblyData.StructureColumnPipeOutput[selCmdIndex].SCH10S_THK;					break;				case "sch10s_so":					result = assemblyData.StructureColumnPipeOutput[selCmdIndex].SCH10S_SO;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureClipSlotHoleOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "div":					result = assemblyData.StructureClipSlotHoleOutput[selCmdIndex].Div;					break;				case "ht":					result = assemblyData.StructureClipSlotHoleOutput[selCmdIndex].ht;					break;				case "wd":					result = assemblyData.StructureClipSlotHoleOutput[selCmdIndex].wd;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnRafter(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureColumnRafter[selCmdIndex].SIZE;					break;				case "rafter1":					result = assemblyData.StructureColumnRafter[selCmdIndex].Rafter1;					break;				case "rafter2":					result = assemblyData.StructureColumnRafter[selCmdIndex].Rafter2;					break;				case "rafter3":					result = assemblyData.StructureColumnRafter[selCmdIndex].Rafter3;					break;				case "rafter4":					result = assemblyData.StructureColumnRafter[selCmdIndex].Rafter4;					break;				case "rafter5":					result = assemblyData.StructureColumnRafter[selCmdIndex].Rafter5;					break;				case "rafter6":					result = assemblyData.StructureColumnRafter[selCmdIndex].Rafter6;					break;				case "a":					result = assemblyData.StructureColumnRafter[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureColumnRafter[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureColumnRafter[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureColumnRafter[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureColumnRafter[selCmdIndex].E;					break;				case "boltholeonshell":					result = assemblyData.StructureColumnRafter[selCmdIndex].BoltHoleOnShell;					break;				case "boltholeoncolumn":					result = assemblyData.StructureColumnRafter[selCmdIndex].BoltHoleOnColumn;					break;				case "boltholeoncenter":					result = assemblyData.StructureColumnRafter[selCmdIndex].BoltHoleOnCenter;					break;				case "boltholedia":					result = assemblyData.StructureColumnRafter[selCmdIndex].BoltHoleDia;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnSide(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureColumnSide[selCmdIndex].SIZE;					break;				case "a1a2":					result = assemblyData.StructureColumnSide[selCmdIndex].A1A2;					break;				case "b":					result = assemblyData.StructureColumnSide[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureColumnSide[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureColumnSide[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureColumnSide[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureColumnSide[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureColumnSide[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureColumnSide[selCmdIndex].H;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnBaseSupport(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "a":					result = assemblyData.StructureColumnBaseSupport[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureColumnBaseSupport[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureColumnBaseSupport[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureColumnBaseSupport[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureColumnBaseSupport[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureColumnBaseSupport[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureColumnBaseSupport[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureColumnBaseSupport[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureColumnBaseSupport[selCmdIndex].I;					break;				case "j":					result = assemblyData.StructureColumnBaseSupport[selCmdIndex].J;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnCenter(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "column":					result = assemblyData.StructureColumnCenter[selCmdIndex].COLUMN;					break;				case "size":					result = assemblyData.StructureColumnCenter[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureColumnCenter[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureColumnCenter[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureColumnCenter[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureColumnCenter[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureColumnCenter[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureColumnCenter[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureColumnCenter[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureColumnCenter[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureColumnCenter[selCmdIndex].I;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureColumnClipShellSide(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureColumnClipShellSide[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureColumnClipShellSide[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureColumnClipShellSide[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureColumnClipShellSide[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureColumnClipShellSide[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureColumnClipShellSide[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureColumnClipShellSide[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureColumnClipShellSide[selCmdIndex].G;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSChannelList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.ChannelList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.ChannelList[selCmdIndex].A;					break;				case "b":					result = assemblyData.ChannelList[selCmdIndex].B;					break;				case "t1":					result = assemblyData.ChannelList[selCmdIndex].t1;					break;				case "t2":					result = assemblyData.ChannelList[selCmdIndex].t2;					break;				case "r":					result = assemblyData.ChannelList[selCmdIndex].R;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSHBeamList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.HBeamList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.HBeamList[selCmdIndex].A;					break;				case "b":					result = assemblyData.HBeamList[selCmdIndex].B;					break;				case "t1":					result = assemblyData.HBeamList[selCmdIndex].t1;					break;				case "t2":					result = assemblyData.HBeamList[selCmdIndex].t2;					break;				case "r":					result = assemblyData.HBeamList[selCmdIndex].R;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSPipeList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "nps":					result = assemblyData.PipeList[selCmdIndex].NPS;					break;				case "od":					result = assemblyData.PipeList[selCmdIndex].OD;					break;				case "sch5s_thk":					result = assemblyData.PipeList[selCmdIndex].SCH5S_THK;					break;				case "sch5s_so":					result = assemblyData.PipeList[selCmdIndex].SCH5S_SO;					break;				case "sch10s_thk":					result = assemblyData.PipeList[selCmdIndex].SCH10S_THK;					break;				case "sch10s_so":					result = assemblyData.PipeList[selCmdIndex].SCH10S_SO;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSClipSlotHoleList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "div":					result = assemblyData.ClipSlotHoleList[selCmdIndex].Div;					break;				case "ht":					result = assemblyData.ClipSlotHoleList[selCmdIndex].ht;					break;				case "wd":					result = assemblyData.ClipSlotHoleList[selCmdIndex].wd;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNozzleEtcList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "gasketthickness":					result = assemblyData.NozzleEtcList[selCmdIndex].GasketThickness;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNozzleOHFList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.NozzleOHFList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.NozzleOHFList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.NozzleOHFList[selCmdIndex].G;					break;				case "od":					result = assemblyData.NozzleOHFList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.NozzleOHFList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.NozzleOHFList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.NozzleOHFList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.NozzleOHFList[selCmdIndex].H;					break;				case "awn":					result = assemblyData.NozzleOHFList[selCmdIndex].AWN;					break;				case "aso":					result = assemblyData.NozzleOHFList[selCmdIndex].ASO;					break;				case "b":					result = assemblyData.NozzleOHFList[selCmdIndex].B;					break;				case "c":					result = assemblyData.NozzleOHFList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.NozzleOHFList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.NozzleOHFList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.NozzleOHFList[selCmdIndex].BoltSize2;					break;				case "boltlength":					result = assemblyData.NozzleOHFList[selCmdIndex].BoltLength;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNozzleTHList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.NozzleTHList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.NozzleTHList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.NozzleTHList[selCmdIndex].G;					break;				case "od":					result = assemblyData.NozzleTHList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.NozzleTHList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.NozzleTHList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.NozzleTHList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.NozzleTHList[selCmdIndex].H;					break;				case "awn":					result = assemblyData.NozzleTHList[selCmdIndex].AWN;					break;				case "aso":					result = assemblyData.NozzleTHList[selCmdIndex].ASO;					break;				case "b":					result = assemblyData.NozzleTHList[selCmdIndex].B;					break;				case "c":					result = assemblyData.NozzleTHList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.NozzleTHList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.NozzleTHList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.NozzleTHList[selCmdIndex].BoltSize2;					break;				case "boltlength":					result = assemblyData.NozzleTHList[selCmdIndex].BoltLength;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNozzleOHFSeriesAList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].G;					break;				case "od":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].H;					break;				case "a":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].A;					break;				case "bwn":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].BWN;					break;				case "bbf":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].BBF;					break;				case "c":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].BoltSize2;					break;				case "boltlengthwnbf":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].BoltLengthWNBF;					break;				case "boltlengthwnwn":					result = assemblyData.NozzleOHFSeriesAList[selCmdIndex].BoltLengthWNWN;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNozzleTHSeriesAist(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].G;					break;				case "od":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].H;					break;				case "a":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].A;					break;				case "bwn":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].BWN;					break;				case "bbf":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].BBF;					break;				case "c":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].BoltSize2;					break;				case "boltlengthwnbf":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].BoltLengthWNBF;					break;				case "boltlengthwnwn":					result = assemblyData.NozzleTHSeriesAist[selCmdIndex].BoltLengthWNWN;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNozzleOHFSeriesBList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].G;					break;				case "od":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].H;					break;				case "a":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].A;					break;				case "bwn":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].BWN;					break;				case "bbf":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].BBF;					break;				case "c":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].BoltSize2;					break;				case "boltlengthwnbf":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].BoltLengthWNBF;					break;				case "boltlengthwnwn":					result = assemblyData.NozzleOHFSeriesBList[selCmdIndex].BoltLengthWNWN;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNozzleTHSeriesBist(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].G;					break;				case "od":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].H;					break;				case "a":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].A;					break;				case "bwn":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].BWN;					break;				case "bbf":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].BBF;					break;				case "c":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].BoltSize2;					break;				case "boltlengthwnbf":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].BoltLengthWNBF;					break;				case "boltlengthwnwn":					result = assemblyData.NozzleTHSeriesBist[selCmdIndex].BoltLengthWNWN;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNozzleOHFLWNList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].G;					break;				case "od":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].H;					break;				case "b":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].B;					break;				case "c":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].BoltSize2;					break;				case "boltlength":					result = assemblyData.NozzleOHFLWNList[selCmdIndex].BoltLength;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNozzleTHLWNList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.NozzleTHLWNList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.NozzleTHLWNList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.NozzleTHLWNList[selCmdIndex].G;					break;				case "od":					result = assemblyData.NozzleTHLWNList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.NozzleTHLWNList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.NozzleTHLWNList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.NozzleTHLWNList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.NozzleTHLWNList[selCmdIndex].H;					break;				case "b":					result = assemblyData.NozzleTHLWNList[selCmdIndex].B;					break;				case "c":					result = assemblyData.NozzleTHLWNList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.NozzleTHLWNList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.NozzleTHLWNList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.NozzleTHLWNList[selCmdIndex].BoltSize2;					break;				case "boltlength":					result = assemblyData.NozzleTHLWNList[selCmdIndex].BoltLength;					break;				default:					result = "nothing";					break;			}			return result;		}		#endregion	}}
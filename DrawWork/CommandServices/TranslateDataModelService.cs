using AssemblyLib.AssemblyModels;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace DrawWork.CommandServices{	public class TranslateDataModelService	{		public AssemblyModel assemblyData;				#region assemblyData		public void SetAssemblyData(AssemblyModel selAssembly)		{			assemblyData= selAssembly;		}		#endregion		#region Translate Model Main Switch		public string GetTranslateModelSwitch(string selUsingStr, string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selUsingStr)			{				case "generaldd":				case "generaldesigndata":					result = GetTMSGeneralDesignData(selCmdStr,selCmdNew,selCmdIndex);					break;				case "generalcl":				case "generalcorrosionloading":					result = GetTMSGeneralCorrosionLoading(selCmdStr,selCmdNew,selCmdIndex);					break;				case "generallcw":				case "generalliquidcapacityweight":					result = GetTMSGeneralLiquidCapacityWeight(selCmdStr,selCmdNew,selCmdIndex);					break;				case "generalms":				case "generalmaterialspecifications":					result = GetTMSGeneralMaterialSpecifications(selCmdStr,selCmdNew,selCmdIndex);					break;				case "generalw":				case "generalwind":					result = GetTMSGeneralWind(selCmdStr,selCmdNew,selCmdIndex);					break;				case "generals":				case "generalseismic":					result = GetTMSGeneralSeismic(selCmdStr,selCmdNew,selCmdIndex);					break;				case "shellin":				case "shellinput":					result = GetTMSShellInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "shellout":				case "shelloutput":					result = GetTMSShellOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "roofinsul":				case "roofinsulation":					result = GetTMSRoofInsulation(selCmdStr,selCmdNew,selCmdIndex);					break;				case "roofcomring":				case "roofcompressionring":					result = GetTMSRoofCompressionRing(selCmdStr,selCmdNew,selCmdIndex);					break;				case "roofcrtin":				case "roofcrtinput":					result = GetTMSRoofCRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "roofdrtin":				case "roofdrtinput":					result = GetTMSRoofDRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "roofifrtin":				case "roofifrtinput":					result = GetTMSRoofIFRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "roofefrtsdin":				case "roofefrtsingledeck":					result = GetTMSRoofEFRTSingleDeck(selCmdStr,selCmdNew,selCmdIndex);					break;				case "roofefrtddin":				case "roofefrtdoubledeck":					result = GetTMSRoofEFRTDoubleDeck(selCmdStr,selCmdNew,selCmdIndex);					break;				case "bottomin":				case "bottominput":					result = GetTMSBottomInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "anchoragein":				case "anchorageinput":					result = GetTMSAnchorageInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "nozzlein":				case "nozzleinputmodel":					result = GetTMSNozzleInputModel(selCmdStr,selCmdNew,selCmdIndex);					break;				case "windgirderin":				case "windgirderinput":					result = GetTMSWindGirderInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "windgirderout":				case "windgirderoutput":					result = GetTMSWindGirderOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "weldingin":				case "weldinginput":					result = GetTMSWeldingInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "accessin":				case "accessinput":					result = GetTMSAccessInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "appurtenancesin":				case "appurtenancesinput":					result = GetTMSAppurtenancesInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "drawinglistcrtin":				case "drawinglistcrtinput":					result = GetTMSDrawingListCRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "drawinglistdrtin":				case "drawinglistdrtinput":					result = GetTMSDrawingListDRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "drawinglistifrtin":				case "drawinglistifrtinput":					result = GetTMSDrawingListIFRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "drawinglistefrtin":				case "drawinglistefrtinput":					result = GetTMSDrawingListEFRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "notescrtin":				case "notescrtinput":					result = GetTMSNotesCRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "notesdrtin":				case "notesdrtinput":					result = GetTMSNotesDRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "notesifrtin":				case "notesifrtinput":					result = GetTMSNotesIFRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "notesefrtin":				case "notesefrtinput":					result = GetTMSNotesEFRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "leaderlistcrtin":				case "leaderlistcrtinput":					result = GetTMSLeaderListCRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "leaderlistdrtin":				case "leaderlistdrtinput":					result = GetTMSLeaderListDRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "leaderlistifrtin":				case "leaderlistifrtinput":					result = GetTMSLeaderListIFRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "leaderlistefrtin":				case "leaderlistefrtinput":					result = GetTMSLeaderListEFRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structurecrtin":				case "structurecrtinput":					result = GetTMSStructureCRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "strucutrecrtcolumnin":				case "structurecrtcolumninput":					result = GetTMSStructureCRTColumnInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structurecrtrafterin":				case "structurecrtrafterinput":					result = GetTMSStructureCRTRafterInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structurecrtgirderin":				case "structurecrtgirderinput":					result = GetTMSStructureCRTGirderInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structurecrtcenterringin":				case "structurecrtcenterringinput":					result = GetTMSStructureCRTCenterRingInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columncrtrafterout":				case "structurecrtcolumnrafteroutput":					result = GetTMSStructureCRTColumnRafterOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columncrtsideout":				case "structurecrtcolumnsideoutput":					result = GetTMSStructureCRTColumnSideOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columncrtbasesupportout":				case "structurecrtcolumnbasesupportoutput":					result = GetTMSStructureCRTColumnBaseSupportOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columncrtcenterout":				case "structurecrtcolumncenteroutput":					result = GetTMSStructureCRTColumnCenterOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "crtclipshellsideout":				case "structurecrtclipshellsideoutput":					result = GetTMSStructureCRTClipShellSideOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "crtclipcenteringsideout":				case "structurecrtclipcenteringsideoutput":					result = GetTMSStructureCRTClipCenteringSideOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "crtcenteringout":				case "structurecrtcenteringoutput":					result = GetTMSStructureCRTCenteringOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "crtcenteringraterout":				case "structurecrtcenteringrateroutput":					result = GetTMSStructureCRTCenteringRaterOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "crtcenteringpurlinout":				case "structurecrtcenteringpurlinoutput":					result = GetTMSStructureCRTCenteringPurlinOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "crtcolumnchannelout":				case "structurecrtcolumnchanneloutput":					result = GetTMSStructureCRTColumnChannelOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "crtcolumnhbeamout":				case "structurecrtcolumnhbeamoutput":					result = GetTMSStructureCRTColumnHBeamOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "crtcolumnpipeout":				case "structurecrtcolumnpipeoutput":					result = GetTMSStructureCRTColumnPipeOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "roofangleout":				case "roofangleoutput":					result = GetTMSRoofAngleOutput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structuredrtin":				case "structuredrtinput":					result = GetTMSStructureDRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structuredrtrafterin":				case "structuredrtrafterinput":					result = GetTMSStructureDRTRafterInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structuredrtgirderin":				case "structuredrtgirderinput":					result = GetTMSStructureDRTGirderInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structuredrtcenteringin":				case "structuredrtcenteringinput":					result = GetTMSStructureDRTCenteringInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structureifrtin":				case "structureifrtinput":					result = GetTMSStructureIFRTInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structureifrtstiffenerin":				case "structureifrtstiffenerinput":					result = GetTMSStructureIFRTStiffenerInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structureifrtdecksupportin":				case "structureifrtdecksupportinput":					result = GetTMSStructureIFRTDeckSupportInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structureefrtsingledeckin":				case "structureefrtsingledeckinput":					result = GetTMSStructureEFRTSingleDeckInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structureefrtsingledeckstiffenerin":				case "structureefrtsingledeckstiffenerinput":					result = GetTMSStructureEFRTSingleDeckStiffenerInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structureefrtsingledeckdecksupportin":				case "structureefrtsingledeckdecksupportinput":					result = GetTMSStructureEFRTSingleDeckDeckSupportInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structureefrtdoubledeckin":				case "structureefrtdoubledeckinput":					result = GetTMSStructureEFRTDoubleDeckInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structureefrtdoubledeckstiffenerin":				case "structureefrtdoubledeckstiffenerinput":					result = GetTMSStructureEFRTDoubleDeckStiffenerInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "structureefrtdoubledeckdecksupportin":				case "structureefrtdoubledeckdecksupportinput":					result = GetTMSStructureEFRTDoubleDeckDeckSupportInput(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columncrtrafterlist":				case "structurecrtcolumnrafterlist":					result = GetTMSStructureCRTColumnRafterList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columncrtsidelist":				case "structurecrtcolumnsidelist":					result = GetTMSStructureCRTColumnSideList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columncrtbasesupportlist":				case "structurecrtcolumnbasesupportlist":					result = GetTMSStructureCRTColumnBaseSupportList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "columncrtcenterlist":				case "structurecrtcolumncenterlist":					result = GetTMSStructureCRTColumnCenterList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "clipshellsidelist":				case "structureclipshellsidelist":					result = GetTMSStructureClipShellSideList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "clipcenteringsidelist":				case "structureclipcenteringsidelist":					result = GetTMSStructureClipCenteringSideList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "centeringlist":				case "structurecenteringlist":					result = GetTMSStructureCenteringList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "centeringrafterlist":				case "structurecenteringrafterlist":					result = GetTMSStructureCenteringRafterList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "drtrafterjointlist":				case "structuredrtrafterjointlist":					result = GetTMSStructureDRTRafterJointList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "angle":				case "angleilist":					result = GetTMSAngleIList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "channel":				case "channellist":					result = GetTMSChannelList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "hbeam":				case "hbeamlist":					result = GetTMSHBeamList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "pipe":				case "pipelist":					result = GetTMSPipeList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "pipeschedule":				case "pipeschedulelist":					result = GetTMSPipeScheduleList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "appurt":				case "appurtlist":					result = GetTMSAppurtList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "anchor":				case "anchorboltlist":					result = GetTMSAnchorBoltList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "anchorchair":				case "anchorchairlist":					result = GetTMSAnchorChairList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "flangeetc":				case "flangeetclist":					result = GetTMSFlangeEtcList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "flangeohf":				case "flangeohflist":					result = GetTMSFlangeOHFList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "flangeth":				case "flangethlist":					result = GetTMSFlangeTHList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "flangeohfa":				case "flangeohfseriesalist":					result = GetTMSFlangeOHFSeriesAList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "flangetha":				case "flangethseriesaist":					result = GetTMSFlangeTHSeriesAist(selCmdStr,selCmdNew,selCmdIndex);					break;				case "flangeohfb":				case "flangeohfseriesblist":					result = GetTMSFlangeOHFSeriesBList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "flangethb":				case "flangethseriesbist":					result = GetTMSFlangeTHSeriesBist(selCmdStr,selCmdNew,selCmdIndex);					break;				case "flangeohflwn":				case "flangeohflwnlist":					result = GetTMSFlangeOHFLWNList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "flangethlwn":				case "flangethlwnlist":					result = GetTMSFlangeTHLWNList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "elbow":				case "elbowlist":					result = GetTMSElbowList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "tee":				case "teelist":					result = GetTMSTeeList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "reducer":				case "reducerlist":					result = GetTMSReducerList(selCmdStr,selCmdNew,selCmdIndex);					break;				case "ubolt":				case "uboltlist":					result = GetTMSUBoltList(selCmdStr,selCmdNew,selCmdIndex);					break;				default:					result = "nothing";					break;			}			return result;		}		#endregion		#region Translate Model Each Switch		private string GetTMSGeneralDesignData(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "codeapplied":					result = assemblyData.GeneralDesignData[selCmdIndex].CodeApplied;					break;				case "appendicesused":					result = assemblyData.GeneralDesignData[selCmdIndex].AppendicesUsed;					break;				case "shelldesign":					result = assemblyData.GeneralDesignData[selCmdIndex].ShellDesign;					break;				case "roofdesign":					result = assemblyData.GeneralDesignData[selCmdIndex].RoofDesign;					break;				case "roofstructuredesign":					result = assemblyData.GeneralDesignData[selCmdIndex].RoofStructureDesign;					break;				case "contents":					result = assemblyData.GeneralDesignData[selCmdIndex].Contents;					break;				case "designspecgr":					result = assemblyData.GeneralDesignData[selCmdIndex].DesignSpecGR;					break;				case "measurementunit":					result = assemblyData.GeneralDesignData[selCmdIndex].MeasurementUnit;					break;				case "rooftype":					result = assemblyData.GeneralDesignData[selCmdIndex].RoofType;					break;				case "sizenominalid":					result = assemblyData.GeneralDesignData[selCmdIndex].SizeNominalID;					break;				case "sizetankheight":					result = assemblyData.GeneralDesignData[selCmdIndex].SizeTankHeight;					break;				case "designtempmin":					result = assemblyData.GeneralDesignData[selCmdIndex].DesignTempMin;					break;				case "designtempmax":					result = assemblyData.GeneralDesignData[selCmdIndex].DesignTempMax;					break;				case "designpressint":					result = assemblyData.GeneralDesignData[selCmdIndex].DesignPressInt;					break;				case "designpressext":					result = assemblyData.GeneralDesignData[selCmdIndex].DesignPressExt;					break;				case "testspgr":					result = assemblyData.GeneralDesignData[selCmdIndex].TestSPGR;					break;				case "opertempmin":					result = assemblyData.GeneralDesignData[selCmdIndex].OperTempMin;					break;				case "opertempnor":					result = assemblyData.GeneralDesignData[selCmdIndex].OperTempNor;					break;				case "opertempmax":					result = assemblyData.GeneralDesignData[selCmdIndex].OperTempMax;					break;				case "operpressint":					result = assemblyData.GeneralDesignData[selCmdIndex].OperPressInt;					break;				case "operpressext":					result = assemblyData.GeneralDesignData[selCmdIndex].OperPressExt;					break;				case "vaporpressuremax":					result = assemblyData.GeneralDesignData[selCmdIndex].VaporPressureMax;					break;				case "setpressureemercovermanhole":					result = assemblyData.GeneralDesignData[selCmdIndex].SetPressureEmerCoverManhole;					break;				case "setpressurebreathervalve":					result = assemblyData.GeneralDesignData[selCmdIndex].SetPressureBreatherValve;					break;				case "setpressurebreathervalvevac":					result = assemblyData.GeneralDesignData[selCmdIndex].SetPressureBreatherValveVac;					break;				case "pumpingratesin":					result = assemblyData.GeneralDesignData[selCmdIndex].PumpingRatesIn;					break;				case "pumpingratesout":					result = assemblyData.GeneralDesignData[selCmdIndex].PumpingRatesOut;					break;				case "roofloadsuniformlive":					result = assemblyData.GeneralDesignData[selCmdIndex].RoofLoadsUniformLive;					break;				case "roofloadsspecialloading":					result = assemblyData.GeneralDesignData[selCmdIndex].RoofLoadsSpecialLoading;					break;				case "rainfallmax":					result = assemblyData.GeneralDesignData[selCmdIndex].RainFallMax;					break;				case "snowfalltotalaccumulation":					result = assemblyData.GeneralDesignData[selCmdIndex].SnowFallTotalAccumulation;					break;				case "foundationtype":					result = assemblyData.GeneralDesignData[selCmdIndex].FoundationType;					break;				case "mdmt":					result = assemblyData.GeneralDesignData[selCmdIndex].MDMT;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSGeneralCorrosionLoading(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "shellplate":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].ShellPlate;					break;				case "roofplate":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].RoofPlate;					break;				case "bottomplate":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].BottomPlate;					break;				case "annularplate":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].AnnularPlate;					break;				case "nozzle":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].Nozzle;					break;				case "structureeachside":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].StructureEachSide;					break;				case "columneachside":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].ColumnEachSide;					break;				case "deskplateupper":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].DeskPlateUpper;					break;				case "deskplatelower":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].DeskPlateLower;					break;				case "windshear":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].WindShear;					break;				case "windmoment":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].WindMoment;					break;				case "seismicshear":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].SeismicShear;					break;				case "seismicmoment":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].SeismicMoment;					break;				case "counterbalancingweight":					result = assemblyData.GeneralCorrosionLoading[selCmdIndex].CounterBalancingWeight;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSGeneralLiquidCapacityWeight(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "highliquidlevel":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].HighLiquidLevel;					break;				case "lowliquidlevel":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].LowLiquidLevel;					break;				case "lowlowliquidlevel":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].LowLowLiquidLevel;					break;				case "highhighliquidlevel":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].HighHIghLiquidLevel;					break;				case "empty":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].Empty;					break;				case "operating":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].Operating;					break;				case "fullofwater":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].fullOfWater;					break;				case "insulation":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].Insulation;					break;				case "platformladder":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].PlatformLadder;					break;				case "others":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].Others;					break;				case "liquid":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].Liquid;					break;				case "paintingareaint":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].PaintingAreaInt;					break;				case "paintingareaext":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].PaintingAreaExt;					break;				case "nominalcapacity":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].NominalCapacity;					break;				case "workingcapacity":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].WorkingCapacity;					break;				case "networkingcapacity":					result = assemblyData.GeneralLiquidCapacityWeight[selCmdIndex].NetWorkingCapacity;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSGeneralMaterialSpecifications(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "shellplate":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].ShellPlate;					break;				case "bottomplate":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].BottomPlate;					break;				case "bottomplatethickness":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].BottomPlateThickness;					break;				case "bottomplateslope":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].BottomPlateSlope;					break;				case "bottomplateweldjointtype":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].BottomPlateWeldJointType;					break;				case "bottomplatebottomstyle":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].BottomPlateBottomStyle;					break;				case "annularplate":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].AnnularPlate;					break;				case "annularplateminwidth":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].AnnularPlateMinWidth;					break;				case "annularplatethickness":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].AnnularPlateThickness;					break;				case "annularplateweldjointtype":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].AnnularPlateWeldJointType;					break;				case "roofplate":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].RoofPlate;					break;				case "roofplatethickness":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].RoofPlateThickness;					break;				case "roofplatesloperadiusratio":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].RoofPlateSlopeRadiusRatio;					break;				case "roofplateweldjointtype":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].RoofPlateWeldJointType;					break;				case "roofplateroofsupport":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].RoofPlateRoofSupport;					break;				case "floatingroofplate":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].FloatingRoofPlate;					break;				case "floatingroofplatethkupper":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].FloatingRoofPlateThkUpper;					break;				case "floatingroofplatethklower":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].FloatingRoofPlateThkLower;					break;				case "nozzleneckpipeplate":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].NozzleNeckPipePlate;					break;				case "forgedflangescoverscplg":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].ForgedFlangesCoversCPLG;					break;				case "plateflangecovers":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].PlateFlangeCovers;					break;				case "internalsupportsweldedtoshell":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].InternalSupportsWeldedToShell;					break;				case "internalpipe":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].InternalPipe;					break;				case "externallug":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].ExternalLug;					break;				case "boltnut":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].BoltNut;					break;				case "gasket":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].Gasket;					break;				case "painting":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].Painting;					break;				case "anchorchairplate":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].AnchorChairPlate;					break;				case "anchorchairreinforcementpad":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].AnchorChairReinforcementPad;					break;				case "anchorblot":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].AnchorBlot;					break;				case "anchornut":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].AnchorNut;					break;				case "anchorwasher":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].AnchorWasher;					break;				case "insulationtype":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].InsulationType;					break;				case "insulationshell":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].InsulationShell;					break;				case "insulationshellthickness":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].InsulationShellThickness;					break;				case "insulationroof":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].InsulationRoof;					break;				case "insulationroofthickness":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].InsulationRoofThickness;					break;				case "nameplateearthlug":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].NamePlateEarthLug;					break;				case "roofstructure":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].RoofStructure;					break;				case "column":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].Column;					break;				case "platformwalkway":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].PlatformWalkWay;					break;				case "internalfloatingroof":					result = assemblyData.GeneralMaterialSpecifications[selCmdIndex].InternalFloatingRoof;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSGeneralWind(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "codeapplied":					result = assemblyData.GeneralWind[selCmdIndex].CodeApplied;					break;				case "designwindspeed":					result = assemblyData.GeneralWind[selCmdIndex].DesignWindSpeed;					break;				case "exposure":					result = assemblyData.GeneralWind[selCmdIndex].Exposure;					break;				case "importancefactor":					result = assemblyData.GeneralWind[selCmdIndex].ImportanceFactor;					break;				case "terraincategory":					result = assemblyData.GeneralWind[selCmdIndex].TerrainCategory;					break;				case "roofpressurecoefficient":					result = assemblyData.GeneralWind[selCmdIndex].RoofPressureCoefficient;					break;				case "shellpressurecoefficient":					result = assemblyData.GeneralWind[selCmdIndex].ShellPressureCoefficient;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSGeneralSeismic(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "codeapplied":					result = assemblyData.GeneralSeismic[selCmdIndex].CodeApplied;					break;				case "seismicusegroup":					result = assemblyData.GeneralSeismic[selCmdIndex].SeismicUseGroup;					break;				case "siteclassification":					result = assemblyData.GeneralSeismic[selCmdIndex].SiteClassification;					break;				case "importancefactor":					result = assemblyData.GeneralSeismic[selCmdIndex].ImportanceFactor;					break;				case "tl":					result = assemblyData.GeneralSeismic[selCmdIndex].TL;					break;				case "ss":					result = assemblyData.GeneralSeismic[selCmdIndex].Ss;					break;				case "s1":					result = assemblyData.GeneralSeismic[selCmdIndex].S1;					break;				case "sds":					result = assemblyData.GeneralSeismic[selCmdIndex].Sds;					break;				case "sd1":					result = assemblyData.GeneralSeismic[selCmdIndex].Sd1;					break;				case "sp":					result = assemblyData.GeneralSeismic[selCmdIndex].Sp;					break;				case "ai":					result = assemblyData.GeneralSeismic[selCmdIndex].Ai;					break;				case "ac":					result = assemblyData.GeneralSeismic[selCmdIndex].Ac;					break;				case "af":					result = assemblyData.GeneralSeismic[selCmdIndex].Af;					break;				case "sai":					result = assemblyData.GeneralSeismic[selCmdIndex].Sai;					break;				case "sac":					result = assemblyData.GeneralSeismic[selCmdIndex].Sac;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSShellInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "caos":				case "tankid":					result = assemblyData.ShellInput[selCmdIndex].TankId;					break;				case "cc":				case "tankheight":					result = assemblyData.ShellInput[selCmdIndex].TankHeight;					break;				case "pc":				case "insulationrequired":					result = assemblyData.ShellInput[selCmdIndex].InsulationRequired;					break;				case "insulationthickness":					result = assemblyData.ShellInput[selCmdIndex].InsulationThickness;					break;				case "insulationdensity":					result = assemblyData.ShellInput[selCmdIndex].InsulationDensity;					break;				case "insulationtype":					result = assemblyData.ShellInput[selCmdIndex].InsulationType;					break;				case "platewidth":					result = assemblyData.ShellInput[selCmdIndex].PlateWidth;					break;				case "platemaxlength":					result = assemblyData.ShellInput[selCmdIndex].PlateMaxLength;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSShellOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "no":					result = assemblyData.ShellOutput[selCmdIndex].No;					break;				case "platewidth":					result = assemblyData.ShellOutput[selCmdIndex].PlateWidth;					break;				case "material":					result = assemblyData.ShellOutput[selCmdIndex].Material;					break;				case "impacttest":					result = assemblyData.ShellOutput[selCmdIndex].ImpactTest;					break;				case "thickness":					result = assemblyData.ShellOutput[selCmdIndex].Thickness;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSRoofInsulation(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "required":					result = assemblyData.RoofInsulation[selCmdIndex].Required;					break;				case "thickness":					result = assemblyData.RoofInsulation[selCmdIndex].Thickness;					break;				case "density":					result = assemblyData.RoofInsulation[selCmdIndex].Density;					break;				case "type":					result = assemblyData.RoofInsulation[selCmdIndex].Type;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSRoofCompressionRing(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "roofslope":					result = assemblyData.RoofCompressionRing[selCmdIndex].RoofSlope;					break;				case "domeradiusratio":					result = assemblyData.RoofCompressionRing[selCmdIndex].DomeRadiusRatio;					break;				case "compressionringtype":					result = assemblyData.RoofCompressionRing[selCmdIndex].CompressionRingType;					break;				case "material":					result = assemblyData.RoofCompressionRing[selCmdIndex].Material;					break;				case "anglesize":					result = assemblyData.RoofCompressionRing[selCmdIndex].AngleSize;					break;				case "thicknesst1":					result = assemblyData.RoofCompressionRing[selCmdIndex].ThicknessT1;					break;				case "widthb":					result = assemblyData.RoofCompressionRing[selCmdIndex].WidthB;					break;				case "outsideprojectiona":					result = assemblyData.RoofCompressionRing[selCmdIndex].OutsideProjectionA;					break;				case "overlapofroofandcompringc":					result = assemblyData.RoofCompressionRing[selCmdIndex].OverlapOfRoofAndCompRingC;					break;				case "thicknessc":					result = assemblyData.RoofCompressionRing[selCmdIndex].ThicknessC;					break;				case "widthd":					result = assemblyData.RoofCompressionRing[selCmdIndex].WidthD;					break;				case "shellthicknessthickenedt1":					result = assemblyData.RoofCompressionRing[selCmdIndex].ShellThicknessThickenedT1;					break;				case "shellwidththickeneda":					result = assemblyData.RoofCompressionRing[selCmdIndex].ShellWidthThickenedA;					break;				case "distancefromshelltopcourseb":					result = assemblyData.RoofCompressionRing[selCmdIndex].DistanceFromShellTopCourseB;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSRoofCRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.RoofCRTInput[selCmdIndex].TankId;					break;				case "tankheight":					result = assemblyData.RoofCRTInput[selCmdIndex].TankHeight;					break;				case "insulationrequired":					result = assemblyData.RoofCRTInput[selCmdIndex].InsulationRequired;					break;				case "insulationthickness":					result = assemblyData.RoofCRTInput[selCmdIndex].InsulationThickness;					break;				case "insulationdensity":					result = assemblyData.RoofCRTInput[selCmdIndex].InsulationDensity;					break;				case "insulationtype":					result = assemblyData.RoofCRTInput[selCmdIndex].InsulationType;					break;				case "platewidth":					result = assemblyData.RoofCRTInput[selCmdIndex].PlateWidth;					break;				case "platelength":					result = assemblyData.RoofCRTInput[selCmdIndex].PlateLength;					break;				case "roofslope":					result = assemblyData.RoofCRTInput[selCmdIndex].RoofSlope;					break;				case "roofplatethickness":					result = assemblyData.RoofCRTInput[selCmdIndex].RoofPlateThickness;					break;				case "roofplatearrangementtype":					result = assemblyData.RoofCRTInput[selCmdIndex].RoofPlateArrangementType;					break;				case "roofplateweldtype":					result = assemblyData.RoofCRTInput[selCmdIndex].RoofPlateWeldType;					break;				case "compressionringtype":					result = assemblyData.RoofCRTInput[selCmdIndex].CompressionRingType;					break;				case "detailbmaterial":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailBMaterial;					break;				case "deatilbanglesize":					result = assemblyData.RoofCRTInput[selCmdIndex].DeatilBAngleSize;					break;				case "detaildmaterial":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailDMaterial;					break;				case "detaildanglesize":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailDAngleSize;					break;				case "detailematerial":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailEMaterial;					break;				case "detaileanglesize":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailEAngleSize;					break;				case "detailithickness":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailIThickness;					break;				case "detailiwidth":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailIWidth;					break;				case "detailioutsideprojection":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailIOutsideProjection;					break;				case "detailioverlap":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailIOverlap;					break;				case "detailkthickness":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailKThickness;					break;				case "detailkwidth":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailKWidth;					break;				case "detailkshellthickness":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailKShellThickness;					break;				case "detailkshellwidth":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailKShellWidth;					break;				case "detailkdistance":					result = assemblyData.RoofCRTInput[selCmdIndex].DetailKDistance;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSRoofDRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.RoofDRTInput[selCmdIndex].TankId;					break;				case "tankheight":					result = assemblyData.RoofDRTInput[selCmdIndex].TankHeight;					break;				case "insulationrequired":					result = assemblyData.RoofDRTInput[selCmdIndex].InsulationRequired;					break;				case "insulationthickness":					result = assemblyData.RoofDRTInput[selCmdIndex].InsulationThickness;					break;				case "insulationdensity":					result = assemblyData.RoofDRTInput[selCmdIndex].InsulationDensity;					break;				case "insulationtype":					result = assemblyData.RoofDRTInput[selCmdIndex].InsulationType;					break;				case "platewidth":					result = assemblyData.RoofDRTInput[selCmdIndex].PlateWidth;					break;				case "platelength":					result = assemblyData.RoofDRTInput[selCmdIndex].PlateLength;					break;				case "domeradiusratio":					result = assemblyData.RoofDRTInput[selCmdIndex].DomeRadiusRatio;					break;				case "roofplatethickness":					result = assemblyData.RoofDRTInput[selCmdIndex].RoofPlateThickness;					break;				case "roofplatearrangementtype":					result = assemblyData.RoofDRTInput[selCmdIndex].RoofPlateArrangementType;					break;				case "roofplateweldtype":					result = assemblyData.RoofDRTInput[selCmdIndex].RoofPlateWeldType;					break;				case "compressionringtype":					result = assemblyData.RoofDRTInput[selCmdIndex].CompressionRingType;					break;				case "detailbmaterial":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailBMaterial;					break;				case "deatilbanglesize":					result = assemblyData.RoofDRTInput[selCmdIndex].DeatilBAngleSize;					break;				case "detaildmaterial":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailDMaterial;					break;				case "detaildanglesize":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailDAngleSize;					break;				case "detailematerial":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailEMaterial;					break;				case "detaileanglesize":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailEAngleSize;					break;				case "detailithickness":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailIThickness;					break;				case "detailiwidth":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailIWidth;					break;				case "detailioutsideprojection":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailIOutsideProjection;					break;				case "detailioverlap":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailIOverlap;					break;				case "detailkthickness":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailKThickness;					break;				case "detailkwidth":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailKWidth;					break;				case "detailkshellthickness":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailKShellThickness;					break;				case "detailkshellwidth":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailKShellWidth;					break;				case "detailkdistance":					result = assemblyData.RoofDRTInput[selCmdIndex].DetailKDistance;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSRoofIFRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.RoofIFRTInput[selCmdIndex].TankId;					break;				case "tankheight":					result = assemblyData.RoofIFRTInput[selCmdIndex].TankHeight;					break;				case "insulationrequired":					result = assemblyData.RoofIFRTInput[selCmdIndex].InsulationRequired;					break;				case "insulationthickness":					result = assemblyData.RoofIFRTInput[selCmdIndex].InsulationThickness;					break;				case "insulationdensity":					result = assemblyData.RoofIFRTInput[selCmdIndex].InsulationDensity;					break;				case "insulationtype":					result = assemblyData.RoofIFRTInput[selCmdIndex].InsulationType;					break;				case "platewidth":					result = assemblyData.RoofIFRTInput[selCmdIndex].PlateWidth;					break;				case "platelength":					result = assemblyData.RoofIFRTInput[selCmdIndex].PlateLength;					break;				case "roofslope":					result = assemblyData.RoofIFRTInput[selCmdIndex].RoofSlope;					break;				case "roofplatethickness":					result = assemblyData.RoofIFRTInput[selCmdIndex].RoofPlateThickness;					break;				case "roofplatearrangementtype":					result = assemblyData.RoofIFRTInput[selCmdIndex].RoofPlateArrangementType;					break;				case "roofplateweldtype":					result = assemblyData.RoofIFRTInput[selCmdIndex].RoofPlateWeldType;					break;				case "internalroofplatematerial":					result = assemblyData.RoofIFRTInput[selCmdIndex].InternalRoofPlateMaterial;					break;				case "internalroofplatethickness":					result = assemblyData.RoofIFRTInput[selCmdIndex].InternalRoofPlateThickness;					break;				case "internalroofplateweldtype":					result = assemblyData.RoofIFRTInput[selCmdIndex].InternalRoofPlateWeldType;					break;				case "cleaningposition":					result = assemblyData.RoofIFRTInput[selCmdIndex].CleaningPosition;					break;				case "operatingpostion":					result = assemblyData.RoofIFRTInput[selCmdIndex].OperatingPostion;					break;				case "outerrimheight":					result = assemblyData.RoofIFRTInput[selCmdIndex].OuterRimHeight;					break;				case "innerrimheight":					result = assemblyData.RoofIFRTInput[selCmdIndex].InnerRimHeight;					break;				case "shelltorimspace":					result = assemblyData.RoofIFRTInput[selCmdIndex].ShellToRimSpace;					break;				case "pontoonwidth":					result = assemblyData.RoofIFRTInput[selCmdIndex].PontoonWidth;					break;				case "pontoonstartangle":					result = assemblyData.RoofIFRTInput[selCmdIndex].PontoonStartAngle;					break;				case "pontoonqty":					result = assemblyData.RoofIFRTInput[selCmdIndex].PontoonQty;					break;				case "outerrimthickness":					result = assemblyData.RoofIFRTInput[selCmdIndex].OuterRimThickness;					break;				case "innerrimthickness":					result = assemblyData.RoofIFRTInput[selCmdIndex].InnerRimThickness;					break;				case "toppontoonthickness":					result = assemblyData.RoofIFRTInput[selCmdIndex].TopPontoonThickness;					break;				case "bottompontoonthickness":					result = assemblyData.RoofIFRTInput[selCmdIndex].BottomPontoonThickness;					break;				case "bulkheadthickness":					result = assemblyData.RoofIFRTInput[selCmdIndex].BulkheadThickness;					break;				case "compressionringtype":					result = assemblyData.RoofIFRTInput[selCmdIndex].CompressionRingType;					break;				case "detailbmaterial":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailBMaterial;					break;				case "deatilbanglesize":					result = assemblyData.RoofIFRTInput[selCmdIndex].DeatilBAngleSize;					break;				case "detaildmaterial":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailDMaterial;					break;				case "detaildanglesize":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailDAngleSize;					break;				case "detailematerial":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailEMaterial;					break;				case "detaileanglesize":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailEAngleSize;					break;				case "detailithickness":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailIThickness;					break;				case "detailiwidth":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailIWidth;					break;				case "detailioutsideprojection":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailIOutsideProjection;					break;				case "detailioverlap":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailIOverlap;					break;				case "detailkthickness":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailKThickness;					break;				case "detailkwidth":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailKWidth;					break;				case "detailkshellthickness":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailKShellThickness;					break;				case "detailkshellwidth":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailKShellWidth;					break;				case "detailkdistance":					result = assemblyData.RoofIFRTInput[selCmdIndex].DetailKDistance;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSRoofEFRTSingleDeck(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].TankId;					break;				case "tankheight":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].TankHeight;					break;				case "insulationrequired":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].InsulationRequired;					break;				case "insulationthickness":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].InsulationThickness;					break;				case "insulationdensity":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].InsulationDensity;					break;				case "insulationtype":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].InsulationType;					break;				case "platewidth":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].PlateWidth;					break;				case "platelength":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].PlateLength;					break;				case "externalroofplatematerial":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].ExternalRoofPlateMaterial;					break;				case "externalroofplatethickness":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].ExternalRoofPlateThickness;					break;				case "externalroofplateweldtype":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].ExternalRoofPlateWeldType;					break;				case "cleaningposition":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].CleaningPosition;					break;				case "operatingpostion":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].OperatingPostion;					break;				case "outerrimheight":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].OuterRimHeight;					break;				case "innerrimheight":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].InnerRimHeight;					break;				case "shelltorimspace":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].ShellToRimSpace;					break;				case "pontoonwidth":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].PontoonWidth;					break;				case "pontoonstartangle":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].PontoonStartAngle;					break;				case "pontoonqty":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].PontoonQty;					break;				case "outerrimthickness":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].OuterRimThickness;					break;				case "innerrimthickness":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].InnerRimThickness;					break;				case "toppontoonthickness":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].TopPontoonThickness;					break;				case "bottompontoonthickness":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].BottomPontoonThickness;					break;				case "bulkheadthickness":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].BulkheadThickness;					break;				case "compressionringtype":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].CompressionRingType;					break;				case "detailbmaterial":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].DetailBMaterial;					break;				case "deatilbanglesize":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].DeatilBAngleSize;					break;				case "detaildmaterial":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].DetailDMaterial;					break;				case "detaildanglesize":					result = assemblyData.RoofEFRTSingleDeck[selCmdIndex].DetailDAngleSize;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSRoofEFRTDoubleDeck(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].TankId;					break;				case "tankheight":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].TankHeight;					break;				case "insulationrequired":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].InsulationRequired;					break;				case "insulationthickness":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].InsulationThickness;					break;				case "insulationdensity":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].InsulationDensity;					break;				case "insulationtype":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].InsulationType;					break;				case "platewidth":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].PlateWidth;					break;				case "platelength":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].PlateLength;					break;				case "externalroofplatematerial":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].ExternalRoofPlateMaterial;					break;				case "externalroofplateupperthickness":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].ExternalRoofPlateUpperThickness;					break;				case "externalroofplatelowerthickness":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].ExternalRoofPlateLowerThickness;					break;				case "externalroofplateweldtype":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].ExternalRoofPlateWeldType;					break;				case "cleaningposition":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].CleaningPosition;					break;				case "operatingpostion":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].OperatingPostion;					break;				case "outerrimheight":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].OuterRimHeight;					break;				case "innerrimheight":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].InnerRimHeight;					break;				case "shelltorimspace":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].ShellToRimSpace;					break;				case "pontoonwidth1st":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].PontoonWidth1st;					break;				case "pontoonwidthl1":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].PontoonWidthL1;					break;				case "pontoonwidthl2":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].PontoonWidthL2;					break;				case "pontoonwidthl3":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].PontoonWidthL3;					break;				case "pontoonwidthlast":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].PontoonWidthLast;					break;				case "outerrimthickness":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].OuterRimThickness;					break;				case "middlerimthickness":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].MiddleRimThickness;					break;				case "innerrimthickness":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].InnerRimThickness;					break;				case "toppontoonthickness":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].TopPontoonThickness;					break;				case "bottompontoonthickness":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].BottomPontoonThickness;					break;				case "bulkheadthickness":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].BulkheadThickness;					break;				case "pottonstartangle":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].PottonStartAngle;					break;				case "bay01pottonqty":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].Bay01PottonQty;					break;				case "bay02pottonqty":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].Bay02PottonQty;					break;				case "bay03pottonqty":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].Bay03PottonQty;					break;				case "bay04pottonqty":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].Bay04PottonQty;					break;				case "bay05pottonqty":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].Bay05PottonQty;					break;				case "bay06pottonqty":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].Bay06PottonQty;					break;				case "bay07pottonqty":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].Bay07PottonQty;					break;				case "bay08pottonqty":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].Bay08PottonQty;					break;				case "bay09pottonqty":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].Bay09PottonQty;					break;				case "compressionringtype":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].CompressionRingType;					break;				case "detailbmaterial":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].DetailBMaterial;					break;				case "deatilbanglesize":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].DeatilBAngleSize;					break;				case "detaildmaterial":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].DetailDMaterial;					break;				case "detaildanglesize":					result = assemblyData.RoofEFRTDoubleDeck[selCmdIndex].DetailDAngleSize;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSBottomInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.BottomInput[selCmdIndex].TankId;					break;				case "tankheight":					result = assemblyData.BottomInput[selCmdIndex].TankHeight;					break;				case "bottomplateslope":					result = assemblyData.BottomInput[selCmdIndex].BottomPlateSlope;					break;				case "bottomplatethickness":					result = assemblyData.BottomInput[selCmdIndex].BottomPlateThickness;					break;				case "bottomplatewidth":					result = assemblyData.BottomInput[selCmdIndex].BottomPlateWidth;					break;				case "bottomplatelength":					result = assemblyData.BottomInput[selCmdIndex].BottomPlateLength;					break;				case "bottomplatearrangementtype":					result = assemblyData.BottomInput[selCmdIndex].BottomPlateArrangementType;					break;				case "bottomplateweldtype":					result = assemblyData.BottomInput[selCmdIndex].BottomPlateWeldType;					break;				case "annularplate":					result = assemblyData.BottomInput[selCmdIndex].AnnularPlate;					break;				case "annularplatewidth":					result = assemblyData.BottomInput[selCmdIndex].AnnularPlateWidth;					break;				case "annularplatethickness":					result = assemblyData.BottomInput[selCmdIndex].AnnularPlateThickness;					break;				case "annularplatetype":					result = assemblyData.BottomInput[selCmdIndex].AnnularPlateType;					break;				case "dripring":					result = assemblyData.BottomInput[selCmdIndex].DripRing;					break;				case "dripringthickness":					result = assemblyData.BottomInput[selCmdIndex].DripRingThickness;					break;				case "dripringa":					result = assemblyData.BottomInput[selCmdIndex].DripRingA;					break;				case "dripringb":					result = assemblyData.BottomInput[selCmdIndex].DripRingB;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSAnchorageInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "anchorchairblot":					result = assemblyData.AnchorageInput[selCmdIndex].AnchorChairBlot;					break;				case "anchortype":					result = assemblyData.AnchorageInput[selCmdIndex].AnchorType;					break;				case "anchorqty":					result = assemblyData.AnchorageInput[selCmdIndex].AnchorQty;					break;				case "anchorsize":					result = assemblyData.AnchorageInput[selCmdIndex].AnchorSize;					break;				case "anchorstartangle":					result = assemblyData.AnchorageInput[selCmdIndex].AnchorStartAngle;					break;				case "anchorheight":					result = assemblyData.AnchorageInput[selCmdIndex].AnchorHeight;					break;				case "topplatethickness":					result = assemblyData.AnchorageInput[selCmdIndex].TopPlateThickness;					break;				case "topplatea1":					result = assemblyData.AnchorageInput[selCmdIndex].TopPlateA1;					break;				case "topplateb":					result = assemblyData.AnchorageInput[selCmdIndex].TopPlateB;					break;				case "topplatec":					result = assemblyData.AnchorageInput[selCmdIndex].TopPlateC;					break;				case "topplatef":					result = assemblyData.AnchorageInput[selCmdIndex].TopPlateF;					break;				case "topplateblotholediameter":					result = assemblyData.AnchorageInput[selCmdIndex].TopPlateBlotHoleDiameter;					break;				case "sideplatethickness":					result = assemblyData.AnchorageInput[selCmdIndex].SidePlateThickness;					break;				case "sideplatedistance":					result = assemblyData.AnchorageInput[selCmdIndex].SidePlateDistance;					break;				case "reinforcementpad":					result = assemblyData.AnchorageInput[selCmdIndex].ReinforcementPad;					break;				case "reinforcementpadthickness":					result = assemblyData.AnchorageInput[selCmdIndex].ReinforcementPadThickness;					break;				case "reinforcementpadwidth":					result = assemblyData.AnchorageInput[selCmdIndex].ReinforcementPadWidth;					break;				case "reinforcementpadlength":					result = assemblyData.AnchorageInput[selCmdIndex].ReinforcementPadLength;					break;				case "reinforcementpadcornerradius":					result = assemblyData.AnchorageInput[selCmdIndex].ReinforcementPadCornerRadius;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNozzleInputModel(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "position":					result = assemblyData.NozzleInputModel[selCmdIndex].Position;					break;				case "lr":					result = assemblyData.NozzleInputModel[selCmdIndex].LR;					break;				case "mark":					result = assemblyData.NozzleInputModel[selCmdIndex].Mark;					break;				case "size":					result = assemblyData.NozzleInputModel[selCmdIndex].Size;					break;				case "sch":					result = assemblyData.NozzleInputModel[selCmdIndex].SCH;					break;				case "qty":					result = assemblyData.NozzleInputModel[selCmdIndex].Qty;					break;				case "flange":					result = assemblyData.NozzleInputModel[selCmdIndex].Flange;					break;				case "rating":					result = assemblyData.NozzleInputModel[selCmdIndex].Rating;					break;				case "type":					result = assemblyData.NozzleInputModel[selCmdIndex].Type;					break;				case "facing":					result = assemblyData.NozzleInputModel[selCmdIndex].Facing;					break;				case "r":					result = assemblyData.NozzleInputModel[selCmdIndex].R;					break;				case "h":					result = assemblyData.NozzleInputModel[selCmdIndex].H;					break;				case "ort":					result = assemblyData.NozzleInputModel[selCmdIndex].Ort;					break;				case "attachedtype":					result = assemblyData.NozzleInputModel[selCmdIndex].AttachedType;					break;				case "tiltangle":					result = assemblyData.NozzleInputModel[selCmdIndex].TiltAngle;					break;				case "offsettocl":					result = assemblyData.NozzleInputModel[selCmdIndex].OffsetToCL;					break;				case "description":					result = assemblyData.NozzleInputModel[selCmdIndex].Description;					break;				case "remarks":					result = assemblyData.NozzleInputModel[selCmdIndex].Remarks;					break;				case "jointtype":					result = assemblyData.NozzleInputModel[selCmdIndex].JointType;					break;				case "fitting":					result = assemblyData.NozzleInputModel[selCmdIndex].Fitting;					break;				case "reinforcingpad":					result = assemblyData.NozzleInputModel[selCmdIndex].ReinforcingPad;					break;				case "reinforcingpadtype":					result = assemblyData.NozzleInputModel[selCmdIndex].ReinforcingPadType;					break;				case "inletoutlet":					result = assemblyData.NozzleInputModel[selCmdIndex].InletOutlet;					break;				case "otherflange":					result = assemblyData.NozzleInputModel[selCmdIndex].OtherFlange;					break;				case "internal":					result = assemblyData.NozzleInputModel[selCmdIndex].Internal;					break;				case "draintype":					result = assemblyData.NozzleInputModel[selCmdIndex].DrainType;					break;				case "riserpipe":					result = assemblyData.NozzleInputModel[selCmdIndex].RiserPipe;					break;				case "mixer":					result = assemblyData.NozzleInputModel[selCmdIndex].Mixer;					break;				case "gaugehatch":					result = assemblyData.NozzleInputModel[selCmdIndex].GaugeHatch;					break;				case "internalladder":					result = assemblyData.NozzleInputModel[selCmdIndex].InternalLadder;					break;				case "openventgooseneckbirdscreen":					result = assemblyData.NozzleInputModel[selCmdIndex].OpenVentGooseNeckBirdScreen;					break;				case "flamearrestor":					result = assemblyData.NozzleInputModel[selCmdIndex].FlameArrestor;					break;				case "emergencyvent":					result = assemblyData.NozzleInputModel[selCmdIndex].EmergencyVent;					break;				case "internalpipebended":					result = assemblyData.NozzleInputModel[selCmdIndex].InternalPipeBended;					break;				case "hrsort":					result = assemblyData.NozzleInputModel[selCmdIndex].HRSort.ToString();					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSWindGirderInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.WindGirderInput[selCmdIndex].TankId;					break;				case "tankheight":					result = assemblyData.WindGirderInput[selCmdIndex].TankHeight;					break;				case "windgirderrequired":					result = assemblyData.WindGirderInput[selCmdIndex].WindGirderRequired;					break;				case "qty":					result = assemblyData.WindGirderInput[selCmdIndex].Qty;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSWindGirderOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "no":					result = assemblyData.WindGirderOutput[selCmdIndex].No;					break;				case "type":					result = assemblyData.WindGirderOutput[selCmdIndex].Type;					break;				case "material":					result = assemblyData.WindGirderOutput[selCmdIndex].Material;					break;				case "elevation":					result = assemblyData.WindGirderOutput[selCmdIndex].Elevation;					break;				case "size":					result = assemblyData.WindGirderOutput[selCmdIndex].Size;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSWeldingInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "shell":					result = assemblyData.WeldingInput[selCmdIndex].Shell;					break;				case "nozzleatshellroof":					result = assemblyData.WeldingInput[selCmdIndex].NozzleAtShellRoof;					break;				case "nozzles":					result = assemblyData.WeldingInput[selCmdIndex].Nozzles;					break;				case "roofinsulationthickness":					result = assemblyData.WeldingInput[selCmdIndex].RoofInsulationThickness;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSAccessInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.AccessInput[selCmdIndex].TankId;					break;				case "tankheight":					result = assemblyData.AccessInput[selCmdIndex].TankHeight;					break;				case "spiralstairwayvsladder":					result = assemblyData.AccessInput[selCmdIndex].SpiralStairwayVSLadder;					break;				case "spiralstairwaystartangle":					result = assemblyData.AccessInput[selCmdIndex].SpiralStairwayStartAngle;					break;				case "ladderstartangle":					result = assemblyData.AccessInput[selCmdIndex].LadderStartAngle;					break;				case "roofplatform":					result = assemblyData.AccessInput[selCmdIndex].RoofPlatform;					break;				case "roofplatformelevation":					result = assemblyData.AccessInput[selCmdIndex].RoofPlatformElevation;					break;				case "foammaintenanceplatform":					result = assemblyData.AccessInput[selCmdIndex].FoamMaintenancePlatform;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSAppurtenancesInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.AppurtenancesInput[selCmdIndex].TankId;					break;				case "tankheight":					result = assemblyData.AppurtenancesInput[selCmdIndex].TankHeight;					break;				case "nameplate":					result = assemblyData.AppurtenancesInput[selCmdIndex].NamePlate;					break;				case "npdistancefromtankcenter":					result = assemblyData.AppurtenancesInput[selCmdIndex].NPDistanceFromTankCenter;					break;				case "npdistancefromtankbottom":					result = assemblyData.AppurtenancesInput[selCmdIndex].NPDistanceFromTankBottom;					break;				case "nameplatewidth":					result = assemblyData.AppurtenancesInput[selCmdIndex].NamePlateWidth;					break;				case "nameplatelength":					result = assemblyData.AppurtenancesInput[selCmdIndex].NamePlateLength;					break;				case "earthlug":					result = assemblyData.AppurtenancesInput[selCmdIndex].EarthLug;					break;				case "eldistancefromtankcenter":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELDistanceFromTankCenter;					break;				case "eldistancefromtankbottom":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELDistanceFromTankBottom;					break;				case "elprojectionfromshell":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELProjectionFromShell;					break;				case "elholesize":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELHoleSize;					break;				case "elqty":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELQty;					break;				case "elorientation01":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELOrientation01;					break;				case "elorientation02":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELOrientation02;					break;				case "elorientation03":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELOrientation03;					break;				case "elorientation04":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELOrientation04;					break;				case "elorientation05":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELOrientation05;					break;				case "elorientation06":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELOrientation06;					break;				case "elorientation07":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELOrientation07;					break;				case "elorientation08":					result = assemblyData.AppurtenancesInput[selCmdIndex].ELOrientation08;					break;				case "settlementcheckpiece":					result = assemblyData.AppurtenancesInput[selCmdIndex].SettlementCheckPiece;					break;				case "scpqty":					result = assemblyData.AppurtenancesInput[selCmdIndex].SCPQty;					break;				case "scpstartorientation":					result = assemblyData.AppurtenancesInput[selCmdIndex].SCPStartOrientation;					break;				case "scpsize":					result = assemblyData.AppurtenancesInput[selCmdIndex].SCPSize;					break;				case "scpprojection":					result = assemblyData.AppurtenancesInput[selCmdIndex].SCPProjection;					break;				case "scpdistancefromtankcenter":					result = assemblyData.AppurtenancesInput[selCmdIndex].SCPDistanceFromTankCenter;					break;				case "scpdistancefromtankbottom":					result = assemblyData.AppurtenancesInput[selCmdIndex].SCPDistanceFromTankBottom;					break;				case "scaffoldcablesupport":					result = assemblyData.AppurtenancesInput[selCmdIndex].ScaffoldCableSupport;					break;				case "scsorientation":					result = assemblyData.AppurtenancesInput[selCmdIndex].SCSOrientation;					break;				case "scsradiusfromtankcenter":					result = assemblyData.AppurtenancesInput[selCmdIndex].SCSRadiusFromTankCenter;					break;				case "scsnozzlesize":					result = assemblyData.AppurtenancesInput[selCmdIndex].SCSNozzleSize;					break;				case "scsnozzleschedule":					result = assemblyData.AppurtenancesInput[selCmdIndex].SCSNozzleSchedule;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSDrawingListCRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "docno":					result = assemblyData.DrawingListCRTInput[selCmdIndex].DocNo;					break;				case "description":					result = assemblyData.DrawingListCRTInput[selCmdIndex].Description;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSDrawingListDRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "docno":					result = assemblyData.DrawingListDRTInput[selCmdIndex].DocNo;					break;				case "description":					result = assemblyData.DrawingListDRTInput[selCmdIndex].Description;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSDrawingListIFRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "docno":					result = assemblyData.DrawingListIFRTInput[selCmdIndex].DocNo;					break;				case "description":					result = assemblyData.DrawingListIFRTInput[selCmdIndex].Description;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSDrawingListEFRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "docno":					result = assemblyData.DrawingListEFRTInput[selCmdIndex].DocNo;					break;				case "description":					result = assemblyData.DrawingListEFRTInput[selCmdIndex].Description;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNotesCRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "papername":					result = assemblyData.NotesCRTInput[selCmdIndex].PaperName;					break;				case "notename":					result = assemblyData.NotesCRTInput[selCmdIndex].NoteName;					break;				case "description":					result = assemblyData.NotesCRTInput[selCmdIndex].Description;					break;				case "name":					result = assemblyData.NotesCRTInput[selCmdIndex].Name;					break;				case "celladdress":					result = assemblyData.NotesCRTInput[selCmdIndex].CellAddress;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNotesDRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "papername":					result = assemblyData.NotesDRTInput[selCmdIndex].PaperName;					break;				case "notename":					result = assemblyData.NotesDRTInput[selCmdIndex].NoteName;					break;				case "description":					result = assemblyData.NotesDRTInput[selCmdIndex].Description;					break;				case "name":					result = assemblyData.NotesDRTInput[selCmdIndex].Name;					break;				case "celladdress":					result = assemblyData.NotesDRTInput[selCmdIndex].CellAddress;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNotesIFRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "papername":					result = assemblyData.NotesIFRTInput[selCmdIndex].PaperName;					break;				case "notename":					result = assemblyData.NotesIFRTInput[selCmdIndex].NoteName;					break;				case "description":					result = assemblyData.NotesIFRTInput[selCmdIndex].Description;					break;				case "name":					result = assemblyData.NotesIFRTInput[selCmdIndex].Name;					break;				case "celladdress":					result = assemblyData.NotesIFRTInput[selCmdIndex].CellAddress;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSNotesEFRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "papername":					result = assemblyData.NotesEFRTInput[selCmdIndex].PaperName;					break;				case "notename":					result = assemblyData.NotesEFRTInput[selCmdIndex].NoteName;					break;				case "description":					result = assemblyData.NotesEFRTInput[selCmdIndex].Description;					break;				case "name":					result = assemblyData.NotesEFRTInput[selCmdIndex].Name;					break;				case "celladdress":					result = assemblyData.NotesEFRTInput[selCmdIndex].CellAddress;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSLeaderListCRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "part":					result = assemblyData.LeaderListCRTInput[selCmdIndex].Part;					break;				case "positionx":					result = assemblyData.LeaderListCRTInput[selCmdIndex].PositionX;					break;				case "posttiony":					result = assemblyData.LeaderListCRTInput[selCmdIndex].PosttionY;					break;				case "nozzleno":					result = assemblyData.LeaderListCRTInput[selCmdIndex].NozzleNo;					break;				case "textrow":					result = assemblyData.LeaderListCRTInput[selCmdIndex].TextRow;					break;				case "rowline01":					result = assemblyData.LeaderListCRTInput[selCmdIndex].RowLine01;					break;				case "rowline02":					result = assemblyData.LeaderListCRTInput[selCmdIndex].RowLine02;					break;				case "rowline03":					result = assemblyData.LeaderListCRTInput[selCmdIndex].RowLine03;					break;				case "rowline04":					result = assemblyData.LeaderListCRTInput[selCmdIndex].RowLine04;					break;				case "rowemptyline01":					result = assemblyData.LeaderListCRTInput[selCmdIndex].RowEmptyLine01;					break;				case "rowemptyline02":					result = assemblyData.LeaderListCRTInput[selCmdIndex].RowEmptyLine02;					break;				case "rowemptyline03":					result = assemblyData.LeaderListCRTInput[selCmdIndex].RowEmptyLine03;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSLeaderListDRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "part":					result = assemblyData.LeaderListDRTInput[selCmdIndex].Part;					break;				case "positionx":					result = assemblyData.LeaderListDRTInput[selCmdIndex].PositionX;					break;				case "posttiony":					result = assemblyData.LeaderListDRTInput[selCmdIndex].PosttionY;					break;				case "nozzleno":					result = assemblyData.LeaderListDRTInput[selCmdIndex].NozzleNo;					break;				case "textrow":					result = assemblyData.LeaderListDRTInput[selCmdIndex].TextRow;					break;				case "rowline01":					result = assemblyData.LeaderListDRTInput[selCmdIndex].RowLine01;					break;				case "rowline02":					result = assemblyData.LeaderListDRTInput[selCmdIndex].RowLine02;					break;				case "rowline03":					result = assemblyData.LeaderListDRTInput[selCmdIndex].RowLine03;					break;				case "rowline04":					result = assemblyData.LeaderListDRTInput[selCmdIndex].RowLine04;					break;				case "rowemptyline01":					result = assemblyData.LeaderListDRTInput[selCmdIndex].RowEmptyLine01;					break;				case "rowemptyline02":					result = assemblyData.LeaderListDRTInput[selCmdIndex].RowEmptyLine02;					break;				case "rowemptyline03":					result = assemblyData.LeaderListDRTInput[selCmdIndex].RowEmptyLine03;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSLeaderListIFRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "part":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].Part;					break;				case "positionx":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].PositionX;					break;				case "posttiony":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].PosttionY;					break;				case "nozzleno":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].NozzleNo;					break;				case "textrow":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].TextRow;					break;				case "rowline01":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].RowLine01;					break;				case "rowline02":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].RowLine02;					break;				case "rowline03":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].RowLine03;					break;				case "rowline04":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].RowLine04;					break;				case "rowemptyline01":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].RowEmptyLine01;					break;				case "rowemptyline02":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].RowEmptyLine02;					break;				case "rowemptyline03":					result = assemblyData.LeaderListIFRTInput[selCmdIndex].RowEmptyLine03;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSLeaderListEFRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "part":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].Part;					break;				case "positionx":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].PositionX;					break;				case "posttiony":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].PosttionY;					break;				case "nozzleno":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].NozzleNo;					break;				case "textrow":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].TextRow;					break;				case "rowline01":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].RowLine01;					break;				case "rowline02":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].RowLine02;					break;				case "rowline03":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].RowLine03;					break;				case "rowline04":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].RowLine04;					break;				case "rowemptyline01":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].RowEmptyLine01;					break;				case "rowemptyline02":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].RowEmptyLine02;					break;				case "rowemptyline03":					result = assemblyData.LeaderListEFRTInput[selCmdIndex].RowEmptyLine03;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.StructureCRTInput[selCmdIndex].TankID;					break;				case "tankheight":					result = assemblyData.StructureCRTInput[selCmdIndex].TankHeight;					break;				case "roofslope":					result = assemblyData.StructureCRTInput[selCmdIndex].RoofSlope;					break;				case "supportingtype":					result = assemblyData.StructureCRTInput[selCmdIndex].SupportingType;					break;				case "raftermaterial":					result = assemblyData.StructureCRTInput[selCmdIndex].RafterMaterial;					break;				case "raftertype":					result = assemblyData.StructureCRTInput[selCmdIndex].RafterType;					break;				case "girdermaterial":					result = assemblyData.StructureCRTInput[selCmdIndex].GirderMaterial;					break;				case "girdertype":					result = assemblyData.StructureCRTInput[selCmdIndex].GirderType;					break;				case "columnshape":					result = assemblyData.StructureCRTInput[selCmdIndex].ColumnShape;					break;				case "columnno":					result = assemblyData.StructureCRTInput[selCmdIndex].ColumnNo;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "no":					result = assemblyData.StructureCRTColumnInput[selCmdIndex].No;					break;				case "radius":					result = assemblyData.StructureCRTColumnInput[selCmdIndex].Radius;					break;				case "qty":					result = assemblyData.StructureCRTColumnInput[selCmdIndex].Qty;					break;				case "size":					result = assemblyData.StructureCRTColumnInput[selCmdIndex].Size;					break;				case "schedule":					result = assemblyData.StructureCRTColumnInput[selCmdIndex].Schedule;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTRafterInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "no":					result = assemblyData.StructureCRTRafterInput[selCmdIndex].No;					break;				case "radius":					result = assemblyData.StructureCRTRafterInput[selCmdIndex].Radius;					break;				case "qty":					result = assemblyData.StructureCRTRafterInput[selCmdIndex].Qty;					break;				case "size":					result = assemblyData.StructureCRTRafterInput[selCmdIndex].Size;					break;				case "totalqty":					result = assemblyData.StructureCRTRafterInput[selCmdIndex].TotalQty;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTGirderInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "no":					result = assemblyData.StructureCRTGirderInput[selCmdIndex].No;					break;				case "radius":					result = assemblyData.StructureCRTGirderInput[selCmdIndex].Radius;					break;				case "qty":					result = assemblyData.StructureCRTGirderInput[selCmdIndex].Qty;					break;				case "size":					result = assemblyData.StructureCRTGirderInput[selCmdIndex].Size;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTCenterRingInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "material":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].Material;					break;				case "position":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].Position;					break;				case "centeringod":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].CenteringOD;					break;				case "height":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].Height;					break;				case "flangeod":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].FlangeOD;					break;				case "flangeid":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].FlangeID;					break;				case "thickness1":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].Thickness1;					break;				case "thickness2":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].Thickness2;					break;				case "purlinsize":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].PurlinSize;					break;				case "c":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTCenterRingInput[selCmdIndex].E;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnRafterOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "type":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].Type;					break;				case "size":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].H;					break;				case "boltholeonshell":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].BoltHoleOnShell;					break;				case "boltholeoncolumn":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].BoltHoleOnColumn;					break;				case "boltholeoncenter":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].BoltHoleOnCenter;					break;				case "boltholedia":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].BoltHoleDia;					break;				case "a1":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].D1;					break;				case "cl1":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].CL1;					break;				case "cl2":					result = assemblyData.StructureCRTColumnRafterOutput[selCmdIndex].CL2;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnSideOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureCRTColumnSideOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTColumnSideOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTColumnSideOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTColumnSideOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTColumnSideOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTColumnSideOutput[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureCRTColumnSideOutput[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureCRTColumnSideOutput[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureCRTColumnSideOutput[selCmdIndex].H;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnBaseSupportOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].Size;					break;				case "od":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].OD;					break;				case "a":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].I;					break;				case "j":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].J;					break;				case "a1":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].D1;					break;				case "e1":					result = assemblyData.StructureCRTColumnBaseSupportOutput[selCmdIndex].E1;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnCenterOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "column":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].COLUMN;					break;				case "size":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].I;					break;				case "j":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].J;					break;				case "k":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].K;					break;				case "a1":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].D1;					break;				case "chamferlength":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].chamferLength;					break;				case "slotholewidth":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].SlotHoleWidth;					break;				case "slotholelength":					result = assemblyData.StructureCRTColumnCenterOutput[selCmdIndex].SlotHoleLength;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTClipShellSideOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tanktype":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].TankType;					break;				case "type":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].Type;					break;				case "angle":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].Angle;					break;				case "size":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].G;					break;				case "holeqty":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].HoleQty;					break;				case "a1":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].D1;					break;				case "e1":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].E1;					break;				case "fmin":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].Fmin;					break;				case "f1":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].F1;					break;				case "g1":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].G1;					break;				case "h1":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].H1;					break;				case "slotholeht":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].SlotholeHt;					break;				case "slotholewd":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].SlotholeWd;					break;				case "bolttype":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].BoltType;					break;				case "boltsize":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].BoltSize;					break;				case "h":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].I;					break;				case "j":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].J;					break;				case "k":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].K;					break;				case "l":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].L;					break;				case "m":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].M;					break;				case "n":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].N;					break;				case "o":					result = assemblyData.StructureCRTClipShellSideOutput[selCmdIndex].O;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTClipCenteringSideOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tanktype":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].TankType;					break;				case "type":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].Type;					break;				case "angle":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].Angle;					break;				case "size":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].E;					break;				case "holeqty":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].HoleQty;					break;				case "a1":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].D1;					break;				case "e1":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].E1;					break;				case "f1":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].F1;					break;				case "slotholeht":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].SlotHoleHt;					break;				case "slotholewd":					result = assemblyData.StructureCRTClipCenteringSideOutput[selCmdIndex].SlotHoleWd;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTCenteringOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tanktype":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].TankType;					break;				case "type":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].Type;					break;				case "inex":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].InEx;					break;				case "size":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].SIZE;					break;				case "od":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].OD;					break;				case "id":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].ID;					break;				case "a":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].E;					break;				case "t1":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].t1;					break;				case "t2":					result = assemblyData.StructureCRTCenteringOutput[selCmdIndex].t2;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTCenteringRaterOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tanktype":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].TankType;					break;				case "type":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].Type;					break;				case "inex":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].InEx;					break;				case "angle":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].Angle;					break;				case "size":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].I;					break;				case "j":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].J;					break;				case "k":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].K;					break;				case "a1":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].D1;					break;				case "e1":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].E1;					break;				case "holeqty":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].HoleQty;					break;				case "girder01":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].Girder01;					break;				case "girder02":					result = assemblyData.StructureCRTCenteringRaterOutput[selCmdIndex].Girder02;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTCenteringPurlinOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureCRTCenteringPurlinOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTCenteringPurlinOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTCenteringPurlinOutput[selCmdIndex].B;					break;				case "t":					result = assemblyData.StructureCRTCenteringPurlinOutput[selCmdIndex].t;					break;				case "r1":					result = assemblyData.StructureCRTCenteringPurlinOutput[selCmdIndex].R1;					break;				case "r2":					result = assemblyData.StructureCRTCenteringPurlinOutput[selCmdIndex].R2;					break;				case "c":					result = assemblyData.StructureCRTCenteringPurlinOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTCenteringPurlinOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTCenteringPurlinOutput[selCmdIndex].E;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnChannelOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureCRTColumnChannelOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTColumnChannelOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTColumnChannelOutput[selCmdIndex].B;					break;				case "t1":					result = assemblyData.StructureCRTColumnChannelOutput[selCmdIndex].t1;					break;				case "t2":					result = assemblyData.StructureCRTColumnChannelOutput[selCmdIndex].t2;					break;				case "r1":					result = assemblyData.StructureCRTColumnChannelOutput[selCmdIndex].R1;					break;				case "r2":					result = assemblyData.StructureCRTColumnChannelOutput[selCmdIndex].R2;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnHBeamOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureCRTColumnHBeamOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTColumnHBeamOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTColumnHBeamOutput[selCmdIndex].B;					break;				case "t1":					result = assemblyData.StructureCRTColumnHBeamOutput[selCmdIndex].t1;					break;				case "t2":					result = assemblyData.StructureCRTColumnHBeamOutput[selCmdIndex].t2;					break;				case "r":					result = assemblyData.StructureCRTColumnHBeamOutput[selCmdIndex].R;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnPipeOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "nps":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].NPS;					break;				case "od":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].OD;					break;				case "sch5s_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH5S_THK;					break;				case "sch5s_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH5S_SO;					break;				case "sch10s_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH10S_THK;					break;				case "sch10s_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH10S_SO;					break;				case "sch10_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH10_THK;					break;				case "sch10_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH10_SO;					break;				case "sch20_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH20_THK;					break;				case "sch20_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH20_SO;					break;				case "sch30_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH30_THK;					break;				case "sch30_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH30_SO;					break;				case "sch40s_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH40S_THK;					break;				case "sch40s_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH40S_SO;					break;				case "std_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].STD_THK;					break;				case "std_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].STD_SO;					break;				case "sch40_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH40_THK;					break;				case "sch40_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH40_SO;					break;				case "sch60_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH60_THK;					break;				case "sch60_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH60_SO;					break;				case "sch80s_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH80S_THK;					break;				case "sch80s_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH80S_SO;					break;				case "xs_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].XS_THK;					break;				case "xs_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].XS_SO;					break;				case "sch80_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH80_THK;					break;				case "sch80_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH80_SO;					break;				case "sch100_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH100_THK;					break;				case "sch100_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH100_SO;					break;				case "sch120_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH120_THK;					break;				case "sch120_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH120_SO;					break;				case "sch140_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH140_THK;					break;				case "sch140_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH140_SO;					break;				case "sch160_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH160_THK;					break;				case "sch160_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].SCH160_SO;					break;				case "xxs_thk":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].XXS_THK;					break;				case "xxs_so":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].XXS_SO;					break;				case "coupling_a":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].COUPLING_A;					break;				case "coupling_b":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].COUPLING_B;					break;				case "coupling_c":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].COUPLING_C;					break;				case "dn":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].DN;					break;				case "shellcorrosionnps":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].ShellCorrosionNPS;					break;				case "shellcorrosion0":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].ShellCorrosion0;					break;				case "shellcorrosion16":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].ShellCorrosion16;					break;				case "shellcorrosion32":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].ShellCorrosion32;					break;				case "shellcorrosion48":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].ShellCorrosion48;					break;				case "shellcorrosion64":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].ShellCorrosion64;					break;				case "roofcorrosionnps":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].RoofCorrosionNPS;					break;				case "roofcorrosion0":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].RoofCorrosion0;					break;				case "roofcorrosion16":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].RoofCorrosion16;					break;				case "roofcorrosion32":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].RoofCorrosion32;					break;				case "roofcorrosion48":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].RoofCorrosion48;					break;				case "roofcorrosion64":					result = assemblyData.StructureCRTColumnPipeOutput[selCmdIndex].RoofCorrosion64;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSRoofAngleOutput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.RoofAngleOutput[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.RoofAngleOutput[selCmdIndex].A;					break;				case "b":					result = assemblyData.RoofAngleOutput[selCmdIndex].B;					break;				case "t":					result = assemblyData.RoofAngleOutput[selCmdIndex].t;					break;				case "r1":					result = assemblyData.RoofAngleOutput[selCmdIndex].R1;					break;				case "r2":					result = assemblyData.RoofAngleOutput[selCmdIndex].R2;					break;				case "c":					result = assemblyData.RoofAngleOutput[selCmdIndex].C;					break;				case "d":					result = assemblyData.RoofAngleOutput[selCmdIndex].D;					break;				case "e":					result = assemblyData.RoofAngleOutput[selCmdIndex].E;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureDRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.StructureDRTInput[selCmdIndex].TankID;					break;				case "tankheight":					result = assemblyData.StructureDRTInput[selCmdIndex].TankHeight;					break;				case "domradiusratio":					result = assemblyData.StructureDRTInput[selCmdIndex].DomRadiusRatio;					break;				case "supportingtype":					result = assemblyData.StructureDRTInput[selCmdIndex].SupportingType;					break;				case "raftermaterial":					result = assemblyData.StructureDRTInput[selCmdIndex].RafterMaterial;					break;				case "raftertype":					result = assemblyData.StructureDRTInput[selCmdIndex].RafterType;					break;				case "girdermaterial":					result = assemblyData.StructureDRTInput[selCmdIndex].GirderMaterial;					break;				case "girdertype":					result = assemblyData.StructureDRTInput[selCmdIndex].GirderType;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureDRTRafterInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "no":					result = assemblyData.StructureDRTRafterInput[selCmdIndex].No;					break;				case "radius":					result = assemblyData.StructureDRTRafterInput[selCmdIndex].Radius;					break;				case "qty":					result = assemblyData.StructureDRTRafterInput[selCmdIndex].Qty;					break;				case "size":					result = assemblyData.StructureDRTRafterInput[selCmdIndex].Size;					break;				case "totalqty":					result = assemblyData.StructureDRTRafterInput[selCmdIndex].TotalQty;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureDRTGirderInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "no":					result = assemblyData.StructureDRTGirderInput[selCmdIndex].No;					break;				case "radius":					result = assemblyData.StructureDRTGirderInput[selCmdIndex].Radius;					break;				case "qty":					result = assemblyData.StructureDRTGirderInput[selCmdIndex].Qty;					break;				case "size":					result = assemblyData.StructureDRTGirderInput[selCmdIndex].Size;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureDRTCenteringInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "material":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].Material;					break;				case "position":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].Position;					break;				case "centeringod":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].CenteringOD;					break;				case "height":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].Height;					break;				case "flangeod":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].FlangeOD;					break;				case "flangeid":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].FlangeID;					break;				case "thickness1":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].Thickness1;					break;				case "thickness2":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].Thickness2;					break;				case "purlinsize":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].PurlinSize;					break;				case "c":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureDRTCenteringInput[selCmdIndex].E;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureIFRTInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.StructureIFRTInput[selCmdIndex].TankID;					break;				case "tankheight":					result = assemblyData.StructureIFRTInput[selCmdIndex].TankHeight;					break;				case "roofslope":					result = assemblyData.StructureIFRTInput[selCmdIndex].RoofSlope;					break;				case "supportingtype":					result = assemblyData.StructureIFRTInput[selCmdIndex].SupportingType;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureIFRTStiffenerInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "material":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].Material;					break;				case "upperouterrimstiffenertype":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperOuterRimStiffenerType;					break;				case "upperouterrimstiffenersize":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperOuterRimStiffenerSize;					break;				case "uppermiddle01type":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperMiddle01Type;					break;				case "uppermiddle01size":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperMiddle01Size;					break;				case "uppermiddle02type":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperMiddle02Type;					break;				case "uppermiddle02size":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperMiddle02Size;					break;				case "upperpontoonrafter01type":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperPontoonRafter01Type;					break;				case "upperpontoonrafter01size":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperPontoonRafter01Size;					break;				case "upperpontoonrafter02type":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperPontoonRafter02Type;					break;				case "upperpontoonrafter02size":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperPontoonRafter02Size;					break;				case "upperpontoonrafter03type":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperPontoonRafter03Type;					break;				case "upperpontoonrafter03size":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].UpperPontoonRafter03Size;					break;				case "middleouterrimstiffenertype":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleOuterRimStiffenerType;					break;				case "middleouterrimstiffenersize":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleOuterRimStiffenerSize;					break;				case "middletruss01type":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleTruss01Type;					break;				case "middletruss01size":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleTruss01Size;					break;				case "middletruss02type":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleTruss02Type;					break;				case "middletruss02size":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleTruss02Size;					break;				case "middleinnerrimstiffenertype":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleInnerRimStiffenerType;					break;				case "middleinnerrimstiffenersize":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleInnerRimStiffenerSize;					break;				case "middleinnermiddlerimstiffenertype":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleInnerMiddleRimStiffenerType;					break;				case "middleinnermiddlerimstiffenersize":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleInnerMiddleRimStiffenerSize;					break;				case "middlebulkheadstiffenertype":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleBulkHeadStiffenerType;					break;				case "middlebulkheadstiffenersize":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].MiddleBulkHeadStiffenerSize;					break;				case "lowerstiffener01type":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].LowerStiffener01Type;					break;				case "lowerstiffener01size":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].LowerStiffener01Size;					break;				case "lowerstiffener0101type":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].LowerStiffener0101Type;					break;				case "lowerstiffener0101size":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].LowerStiffener0101Size;					break;				case "lowerstiffener02type":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].LowerStiffener02Type;					break;				case "lowerstiffener02size":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].LowerStiffener02Size;					break;				case "lowerstiffener0201type":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].LowerStiffener0201Type;					break;				case "lowerstiffener0201size":					result = assemblyData.StructureIFRTStiffenerInput[selCmdIndex].LowerStiffener0201Size;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureIFRTDeckSupportInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "deckpartqty":					result = assemblyData.StructureIFRTDeckSupportInput[selCmdIndex].DeckPartQty;					break;				case "deckpartstartangle":					result = assemblyData.StructureIFRTDeckSupportInput[selCmdIndex].DeckPartStartAngle;					break;				case "deckpartsupportsize":					result = assemblyData.StructureIFRTDeckSupportInput[selCmdIndex].DeckPartSupportSize;					break;				case "deckpartsleevesize":					result = assemblyData.StructureIFRTDeckSupportInput[selCmdIndex].DeckPartSleeveSize;					break;				case "pontoonpartqtyper":					result = assemblyData.StructureIFRTDeckSupportInput[selCmdIndex].PontoonPartQtyPer;					break;				case "pontoonstartangle":					result = assemblyData.StructureIFRTDeckSupportInput[selCmdIndex].PontoonStartAngle;					break;				case "pontoonsupportsize":					result = assemblyData.StructureIFRTDeckSupportInput[selCmdIndex].PontoonSupportSize;					break;				case "pontoonsleevesize":					result = assemblyData.StructureIFRTDeckSupportInput[selCmdIndex].PontoonSleeveSize;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureEFRTSingleDeckInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.StructureEFRTSingleDeckInput[selCmdIndex].TankID;					break;				case "tankheight":					result = assemblyData.StructureEFRTSingleDeckInput[selCmdIndex].TankHeight;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureEFRTSingleDeckStiffenerInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "material":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].Material;					break;				case "upperouterrimstiffenertype":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperOuterRimStiffenerType;					break;				case "upperouterrimstiffenersize":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperOuterRimStiffenerSize;					break;				case "uppermiddle01type":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperMiddle01Type;					break;				case "uppermiddle01size":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperMiddle01Size;					break;				case "uppermiddle02type":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperMiddle02Type;					break;				case "uppermiddle02size":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperMiddle02Size;					break;				case "upperpontoonrafter01type":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter01Type;					break;				case "upperpontoonrafter01size":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter01Size;					break;				case "upperpontoonrafter02type":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter02Type;					break;				case "upperpontoonrafter02size":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter02Size;					break;				case "upperpontoonrafter03type":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter03Type;					break;				case "upperpontoonrafter03size":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter03Size;					break;				case "middleouterrimstiffenertype":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleOuterRimStiffenerType;					break;				case "middleouterrimstiffenersize":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleOuterRimStiffenerSize;					break;				case "middletruss01type":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleTruss01Type;					break;				case "middletruss01size":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleTruss01Size;					break;				case "middletruss02type":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleTruss02Type;					break;				case "middletruss02size":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleTruss02Size;					break;				case "middleinnerrimstiffenertype":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleInnerRimStiffenerType;					break;				case "middleinnerrimstiffenersize":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleInnerRimStiffenerSize;					break;				case "middleinnermiddlerimstiffenertype":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleInnerMiddleRimStiffenerType;					break;				case "middleinnermiddlerimstiffenersize":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleInnerMiddleRimStiffenerSize;					break;				case "middlebulkheadstiffenertype":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleBulkHeadStiffenerType;					break;				case "middlebulkheadstiffenersize":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].MiddleBulkHeadStiffenerSize;					break;				case "lowerstiffener01type":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].LowerStiffener01Type;					break;				case "lowerstiffener01size":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].LowerStiffener01Size;					break;				case "lowerstiffener0101type":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].LowerStiffener0101Type;					break;				case "lowerstiffener0101size":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].LowerStiffener0101Size;					break;				case "lowerstiffener02type":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].LowerStiffener02Type;					break;				case "lowerstiffener02size":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].LowerStiffener02Size;					break;				case "lowerstiffener0201type":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].LowerStiffener0201Type;					break;				case "lowerstiffener0201size":					result = assemblyData.StructureEFRTSingleDeckStiffenerInput[selCmdIndex].LowerStiffener0201Size;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureEFRTSingleDeckDeckSupportInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "deckpartqty":					result = assemblyData.StructureEFRTSingleDeckDeckSupportInput[selCmdIndex].DeckPartQty;					break;				case "deckpartstartangle":					result = assemblyData.StructureEFRTSingleDeckDeckSupportInput[selCmdIndex].DeckPartStartAngle;					break;				case "deckpartsupportsize":					result = assemblyData.StructureEFRTSingleDeckDeckSupportInput[selCmdIndex].DeckPartSupportSize;					break;				case "deckpartsleevesize":					result = assemblyData.StructureEFRTSingleDeckDeckSupportInput[selCmdIndex].DeckPartSleeveSize;					break;				case "pontoonpartqtyper":					result = assemblyData.StructureEFRTSingleDeckDeckSupportInput[selCmdIndex].PontoonPartQtyPer;					break;				case "pontoonstartangle":					result = assemblyData.StructureEFRTSingleDeckDeckSupportInput[selCmdIndex].PontoonStartAngle;					break;				case "pontoonsupportsize":					result = assemblyData.StructureEFRTSingleDeckDeckSupportInput[selCmdIndex].PontoonSupportSize;					break;				case "pontoonsleevesize":					result = assemblyData.StructureEFRTSingleDeckDeckSupportInput[selCmdIndex].PontoonSleeveSize;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureEFRTDoubleDeckInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tankid":					result = assemblyData.StructureEFRTDoubleDeckInput[selCmdIndex].TankID;					break;				case "tankheight":					result = assemblyData.StructureEFRTDoubleDeckInput[selCmdIndex].TankHeight;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureEFRTDoubleDeckStiffenerInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "material":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].Material;					break;				case "upperouterrimstiffenertype":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperOuterRimStiffenerType;					break;				case "upperouterrimstiffenersize":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperOuterRimStiffenerSize;					break;				case "uppermiddle01type":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperMiddle01Type;					break;				case "uppermiddle01size":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperMiddle01Size;					break;				case "uppermiddle02type":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperMiddle02Type;					break;				case "uppermiddle02size":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperMiddle02Size;					break;				case "upperpontoonrafter01type":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter01Type;					break;				case "upperpontoonrafter01size":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter01Size;					break;				case "upperpontoonrafter02type":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter02Type;					break;				case "upperpontoonrafter02size":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter02Size;					break;				case "upperpontoonrafter03type":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter03Type;					break;				case "upperpontoonrafter03size":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].UpperPontoonRafter03Size;					break;				case "middleouterrimstiffenertype":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleOuterRimStiffenerType;					break;				case "middleouterrimstiffenersize":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleOuterRimStiffenerSize;					break;				case "middletruss01type":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleTruss01Type;					break;				case "middletruss01size":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleTruss01Size;					break;				case "middletruss02type":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleTruss02Type;					break;				case "middletruss02size":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleTruss02Size;					break;				case "middleinnerrimstiffenertype":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleInnerRimStiffenerType;					break;				case "middleinnerrimstiffenersize":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleInnerRimStiffenerSize;					break;				case "middleinnermiddlerimstiffenertype":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleInnerMiddleRimStiffenerType;					break;				case "middleinnermiddlerimstiffenersize":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleInnerMiddleRimStiffenerSize;					break;				case "middlebulkheadstiffenertype":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleBulkHeadStiffenerType;					break;				case "middlebulkheadstiffenersize":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].MiddleBulkHeadStiffenerSize;					break;				case "lowerstiffener01type":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].LowerStiffener01Type;					break;				case "lowerstiffener01size":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].LowerStiffener01Size;					break;				case "lowerstiffener0101type":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].LowerStiffener0101Type;					break;				case "lowerstiffener0101size":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].LowerStiffener0101Size;					break;				case "lowerstiffener02type":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].LowerStiffener02Type;					break;				case "lowerstiffener02size":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].LowerStiffener02Size;					break;				case "lowerstiffener0201type":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].LowerStiffener0201Type;					break;				case "lowerstiffener0201size":					result = assemblyData.StructureEFRTDoubleDeckStiffenerInput[selCmdIndex].LowerStiffener0201Size;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureEFRTDoubleDeckDeckSupportInput(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "deckpartqty":					result = assemblyData.StructureEFRTDoubleDeckDeckSupportInput[selCmdIndex].DeckPartQty;					break;				case "deckpartstartangle":					result = assemblyData.StructureEFRTDoubleDeckDeckSupportInput[selCmdIndex].DeckPartStartAngle;					break;				case "deckpartsupportsize":					result = assemblyData.StructureEFRTDoubleDeckDeckSupportInput[selCmdIndex].DeckPartSupportSize;					break;				case "deckpartsleevesize":					result = assemblyData.StructureEFRTDoubleDeckDeckSupportInput[selCmdIndex].DeckPartSleeveSize;					break;				case "pontoonpartqtyper":					result = assemblyData.StructureEFRTDoubleDeckDeckSupportInput[selCmdIndex].PontoonPartQtyPer;					break;				case "pontoonstartangle":					result = assemblyData.StructureEFRTDoubleDeckDeckSupportInput[selCmdIndex].PontoonStartAngle;					break;				case "pontoonsupportsize":					result = assemblyData.StructureEFRTDoubleDeckDeckSupportInput[selCmdIndex].PontoonSupportSize;					break;				case "pontoonsleevesize":					result = assemblyData.StructureEFRTDoubleDeckDeckSupportInput[selCmdIndex].PontoonSleeveSize;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnRafterList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "type":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].Type;					break;				case "size":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].H;					break;				case "boltholeonshell":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].BoltHoleOnShell;					break;				case "boltholeoncolumn":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].BoltHoleOnColumn;					break;				case "boltholeoncenter":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].BoltHoleOnCenter;					break;				case "boltholedia":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].BoltHoleDia;					break;				case "a1":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].D1;					break;				case "cl1":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].CL1;					break;				case "cl2":					result = assemblyData.StructureCRTColumnRafterList[selCmdIndex].CL2;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnSideList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureCRTColumnSideList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTColumnSideList[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTColumnSideList[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTColumnSideList[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTColumnSideList[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTColumnSideList[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureCRTColumnSideList[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureCRTColumnSideList[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureCRTColumnSideList[selCmdIndex].H;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnBaseSupportList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].Size;					break;				case "od":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].OD;					break;				case "a":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].I;					break;				case "j":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].J;					break;				case "a1":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].D1;					break;				case "e1":					result = assemblyData.StructureCRTColumnBaseSupportList[selCmdIndex].E1;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCRTColumnCenterList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "column":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].COLUMN;					break;				case "size":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].I;					break;				case "j":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].J;					break;				case "k":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].K;					break;				case "a1":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].D1;					break;				case "chamferlength":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].chamferLength;					break;				case "slotholewidth":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].SlotHoleWidth;					break;				case "slotholelength":					result = assemblyData.StructureCRTColumnCenterList[selCmdIndex].SlotHoleLength;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureClipShellSideList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tanktype":					result = assemblyData.StructureClipShellSideList[selCmdIndex].TankType;					break;				case "type":					result = assemblyData.StructureClipShellSideList[selCmdIndex].Type;					break;				case "angle":					result = assemblyData.StructureClipShellSideList[selCmdIndex].Angle;					break;				case "size":					result = assemblyData.StructureClipShellSideList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureClipShellSideList[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureClipShellSideList[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureClipShellSideList[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureClipShellSideList[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureClipShellSideList[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureClipShellSideList[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureClipShellSideList[selCmdIndex].G;					break;				case "holeqty":					result = assemblyData.StructureClipShellSideList[selCmdIndex].HoleQty;					break;				case "a1":					result = assemblyData.StructureClipShellSideList[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureClipShellSideList[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureClipShellSideList[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureClipShellSideList[selCmdIndex].D1;					break;				case "e1":					result = assemblyData.StructureClipShellSideList[selCmdIndex].E1;					break;				case "fmin":					result = assemblyData.StructureClipShellSideList[selCmdIndex].Fmin;					break;				case "f1":					result = assemblyData.StructureClipShellSideList[selCmdIndex].F1;					break;				case "g1":					result = assemblyData.StructureClipShellSideList[selCmdIndex].G1;					break;				case "h1":					result = assemblyData.StructureClipShellSideList[selCmdIndex].H1;					break;				case "slotholeht":					result = assemblyData.StructureClipShellSideList[selCmdIndex].SlotholeHt;					break;				case "slotholewd":					result = assemblyData.StructureClipShellSideList[selCmdIndex].SlotholeWd;					break;				case "bolttype":					result = assemblyData.StructureClipShellSideList[selCmdIndex].BoltType;					break;				case "boltsize":					result = assemblyData.StructureClipShellSideList[selCmdIndex].BoltSize;					break;				case "h":					result = assemblyData.StructureClipShellSideList[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureClipShellSideList[selCmdIndex].I;					break;				case "j":					result = assemblyData.StructureClipShellSideList[selCmdIndex].J;					break;				case "k":					result = assemblyData.StructureClipShellSideList[selCmdIndex].K;					break;				case "l":					result = assemblyData.StructureClipShellSideList[selCmdIndex].L;					break;				case "m":					result = assemblyData.StructureClipShellSideList[selCmdIndex].M;					break;				case "n":					result = assemblyData.StructureClipShellSideList[selCmdIndex].N;					break;				case "o":					result = assemblyData.StructureClipShellSideList[selCmdIndex].O;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureClipCenteringSideList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tanktype":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].TankType;					break;				case "type":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].Type;					break;				case "angle":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].Angle;					break;				case "size":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].E;					break;				case "holeqty":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].HoleQty;					break;				case "a1":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].D1;					break;				case "e1":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].E1;					break;				case "f1":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].F1;					break;				case "slotholeht":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].SlotHoleHt;					break;				case "slotholewd":					result = assemblyData.StructureClipCenteringSideList[selCmdIndex].SlotHoleWd;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCenteringList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tanktype":					result = assemblyData.StructureCenteringList[selCmdIndex].TankType;					break;				case "type":					result = assemblyData.StructureCenteringList[selCmdIndex].Type;					break;				case "inex":					result = assemblyData.StructureCenteringList[selCmdIndex].InEx;					break;				case "size":					result = assemblyData.StructureCenteringList[selCmdIndex].SIZE;					break;				case "od":					result = assemblyData.StructureCenteringList[selCmdIndex].OD;					break;				case "id":					result = assemblyData.StructureCenteringList[selCmdIndex].ID;					break;				case "a":					result = assemblyData.StructureCenteringList[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCenteringList[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCenteringList[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCenteringList[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCenteringList[selCmdIndex].E;					break;				case "t1":					result = assemblyData.StructureCenteringList[selCmdIndex].t1;					break;				case "t2":					result = assemblyData.StructureCenteringList[selCmdIndex].t2;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureCenteringRafterList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "tanktype":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].TankType;					break;				case "type":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].Type;					break;				case "inex":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].InEx;					break;				case "angle":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].Angle;					break;				case "size":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].I;					break;				case "j":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].J;					break;				case "k":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].K;					break;				case "a1":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].D1;					break;				case "e1":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].E1;					break;				case "holeqty":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].HoleQty;					break;				case "girder01":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].Girder01;					break;				case "girder02":					result = assemblyData.StructureCenteringRafterList[selCmdIndex].Girder02;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSStructureDRTRafterJointList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].A;					break;				case "b":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].B;					break;				case "c":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].C;					break;				case "d":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].D;					break;				case "e":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].E;					break;				case "f":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].F;					break;				case "g":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].G;					break;				case "h":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].H;					break;				case "i":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].I;					break;				case "a1":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].A1;					break;				case "b1":					result = assemblyData.StructureDRTRafterJointList[selCmdIndex].B1;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSAngleIList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.AngleIList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.AngleIList[selCmdIndex].A;					break;				case "b":					result = assemblyData.AngleIList[selCmdIndex].B;					break;				case "t":					result = assemblyData.AngleIList[selCmdIndex].t;					break;				case "r1":					result = assemblyData.AngleIList[selCmdIndex].R1;					break;				case "r2":					result = assemblyData.AngleIList[selCmdIndex].R2;					break;				case "c":					result = assemblyData.AngleIList[selCmdIndex].C;					break;				case "d":					result = assemblyData.AngleIList[selCmdIndex].D;					break;				case "e":					result = assemblyData.AngleIList[selCmdIndex].E;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSChannelList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.ChannelList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.ChannelList[selCmdIndex].A;					break;				case "b":					result = assemblyData.ChannelList[selCmdIndex].B;					break;				case "t1":					result = assemblyData.ChannelList[selCmdIndex].t1;					break;				case "t2":					result = assemblyData.ChannelList[selCmdIndex].t2;					break;				case "r1":					result = assemblyData.ChannelList[selCmdIndex].R1;					break;				case "r2":					result = assemblyData.ChannelList[selCmdIndex].R2;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSHBeamList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.HBeamList[selCmdIndex].SIZE;					break;				case "a":					result = assemblyData.HBeamList[selCmdIndex].A;					break;				case "b":					result = assemblyData.HBeamList[selCmdIndex].B;					break;				case "t1":					result = assemblyData.HBeamList[selCmdIndex].t1;					break;				case "t2":					result = assemblyData.HBeamList[selCmdIndex].t2;					break;				case "r":					result = assemblyData.HBeamList[selCmdIndex].R;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSPipeList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "nps":					result = assemblyData.PipeList[selCmdIndex].NPS;					break;				case "od":					result = assemblyData.PipeList[selCmdIndex].OD;					break;				case "sch5s_thk":					result = assemblyData.PipeList[selCmdIndex].SCH5S_THK;					break;				case "sch5s_so":					result = assemblyData.PipeList[selCmdIndex].SCH5S_SO;					break;				case "sch10s_thk":					result = assemblyData.PipeList[selCmdIndex].SCH10S_THK;					break;				case "sch10s_so":					result = assemblyData.PipeList[selCmdIndex].SCH10S_SO;					break;				case "sch10_thk":					result = assemblyData.PipeList[selCmdIndex].SCH10_THK;					break;				case "sch10_so":					result = assemblyData.PipeList[selCmdIndex].SCH10_SO;					break;				case "sch20_thk":					result = assemblyData.PipeList[selCmdIndex].SCH20_THK;					break;				case "sch20_so":					result = assemblyData.PipeList[selCmdIndex].SCH20_SO;					break;				case "sch30_thk":					result = assemblyData.PipeList[selCmdIndex].SCH30_THK;					break;				case "sch30_so":					result = assemblyData.PipeList[selCmdIndex].SCH30_SO;					break;				case "sch40s_thk":					result = assemblyData.PipeList[selCmdIndex].SCH40S_THK;					break;				case "sch40s_so":					result = assemblyData.PipeList[selCmdIndex].SCH40S_SO;					break;				case "std_thk":					result = assemblyData.PipeList[selCmdIndex].STD_THK;					break;				case "std_so":					result = assemblyData.PipeList[selCmdIndex].STD_SO;					break;				case "sch40_thk":					result = assemblyData.PipeList[selCmdIndex].SCH40_THK;					break;				case "sch40_so":					result = assemblyData.PipeList[selCmdIndex].SCH40_SO;					break;				case "sch60_thk":					result = assemblyData.PipeList[selCmdIndex].SCH60_THK;					break;				case "sch60_so":					result = assemblyData.PipeList[selCmdIndex].SCH60_SO;					break;				case "sch80s_thk":					result = assemblyData.PipeList[selCmdIndex].SCH80S_THK;					break;				case "sch80s_so":					result = assemblyData.PipeList[selCmdIndex].SCH80S_SO;					break;				case "xs_thk":					result = assemblyData.PipeList[selCmdIndex].XS_THK;					break;				case "xs_so":					result = assemblyData.PipeList[selCmdIndex].XS_SO;					break;				case "sch80_thk":					result = assemblyData.PipeList[selCmdIndex].SCH80_THK;					break;				case "sch80_so":					result = assemblyData.PipeList[selCmdIndex].SCH80_SO;					break;				case "sch100_thk":					result = assemblyData.PipeList[selCmdIndex].SCH100_THK;					break;				case "sch100_so":					result = assemblyData.PipeList[selCmdIndex].SCH100_SO;					break;				case "sch120_thk":					result = assemblyData.PipeList[selCmdIndex].SCH120_THK;					break;				case "sch120_so":					result = assemblyData.PipeList[selCmdIndex].SCH120_SO;					break;				case "sch140_thk":					result = assemblyData.PipeList[selCmdIndex].SCH140_THK;					break;				case "sch140_so":					result = assemblyData.PipeList[selCmdIndex].SCH140_SO;					break;				case "sch160_thk":					result = assemblyData.PipeList[selCmdIndex].SCH160_THK;					break;				case "sch160_so":					result = assemblyData.PipeList[selCmdIndex].SCH160_SO;					break;				case "xxs_thk":					result = assemblyData.PipeList[selCmdIndex].XXS_THK;					break;				case "xxs_so":					result = assemblyData.PipeList[selCmdIndex].XXS_SO;					break;				case "coupling_a":					result = assemblyData.PipeList[selCmdIndex].COUPLING_A;					break;				case "coupling_b":					result = assemblyData.PipeList[selCmdIndex].COUPLING_B;					break;				case "coupling_c":					result = assemblyData.PipeList[selCmdIndex].COUPLING_C;					break;				case "dn":					result = assemblyData.PipeList[selCmdIndex].DN;					break;				case "shellcorrosionnps":					result = assemblyData.PipeList[selCmdIndex].ShellCorrosionNPS;					break;				case "shellcorrosion0":					result = assemblyData.PipeList[selCmdIndex].ShellCorrosion0;					break;				case "shellcorrosion16":					result = assemblyData.PipeList[selCmdIndex].ShellCorrosion16;					break;				case "shellcorrosion32":					result = assemblyData.PipeList[selCmdIndex].ShellCorrosion32;					break;				case "shellcorrosion48":					result = assemblyData.PipeList[selCmdIndex].ShellCorrosion48;					break;				case "shellcorrosion64":					result = assemblyData.PipeList[selCmdIndex].ShellCorrosion64;					break;				case "roofcorrosionnps":					result = assemblyData.PipeList[selCmdIndex].RoofCorrosionNPS;					break;				case "roofcorrosion0":					result = assemblyData.PipeList[selCmdIndex].RoofCorrosion0;					break;				case "roofcorrosion16":					result = assemblyData.PipeList[selCmdIndex].RoofCorrosion16;					break;				case "roofcorrosion32":					result = assemblyData.PipeList[selCmdIndex].RoofCorrosion32;					break;				case "roofcorrosion48":					result = assemblyData.PipeList[selCmdIndex].RoofCorrosion48;					break;				case "roofcorrosion64":					result = assemblyData.PipeList[selCmdIndex].RoofCorrosion64;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSPipeScheduleList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "div":					result = assemblyData.PipeScheduleList[selCmdIndex].DIV;					break;				case "div2":					result = assemblyData.PipeScheduleList[selCmdIndex].DIV2;					break;				case "sch5s_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH5S_THK;					break;				case "sch5s_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH5S_SO;					break;				case "sch10s_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH10S_THK;					break;				case "sch10s_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH10S_SO;					break;				case "sch10_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH10_THK;					break;				case "sch10_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH10_SO;					break;				case "sch20_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH20_THK;					break;				case "sch20_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH20_SO;					break;				case "sch30_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH30_THK;					break;				case "sch30_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH30_SO;					break;				case "sch40s_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH40S_THK;					break;				case "sch40s_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH40S_SO;					break;				case "std_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].STD_THK;					break;				case "std_so":					result = assemblyData.PipeScheduleList[selCmdIndex].STD_SO;					break;				case "sch40_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH40_THK;					break;				case "sch40_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH40_SO;					break;				case "sch60_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH60_THK;					break;				case "sch60_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH60_SO;					break;				case "sch80s_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH80S_THK;					break;				case "sch80s_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH80S_SO;					break;				case "xs_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].XS_THK;					break;				case "xs_so":					result = assemblyData.PipeScheduleList[selCmdIndex].XS_SO;					break;				case "sch80_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH80_THK;					break;				case "sch80_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH80_SO;					break;				case "sch100_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH100_THK;					break;				case "sch100_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH100_SO;					break;				case "sch120_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH120_THK;					break;				case "sch120_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH120_SO;					break;				case "sch140_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH140_THK;					break;				case "sch140_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH140_SO;					break;				case "sch160_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH160_THK;					break;				case "sch160_so":					result = assemblyData.PipeScheduleList[selCmdIndex].SCH160_SO;					break;				case "xxs_thk":					result = assemblyData.PipeScheduleList[selCmdIndex].XXS_THK;					break;				case "xxs_so":					result = assemblyData.PipeScheduleList[selCmdIndex].XXS_SO;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSAppurtList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "nameplatewidth":					result = assemblyData.AppurtList[selCmdIndex].NamePlateWidth;					break;				case "nameplatelength":					result = assemblyData.AppurtList[selCmdIndex].NamePlateLength;					break;				case "scaffoldcablesupportnpsa1":					result = assemblyData.AppurtList[selCmdIndex].ScaffoldCableSupportNPSA1;					break;				case "scaffoldcablesupportscha1":					result = assemblyData.AppurtList[selCmdIndex].ScaffoldCableSupportSCHA1;					break;				case "scaffoldcablesupportb1":					result = assemblyData.AppurtList[selCmdIndex].ScaffoldCableSupportB1;					break;				case "scaffoldcablesupportc1":					result = assemblyData.AppurtList[selCmdIndex].ScaffoldCableSupportC1;					break;				case "scaffoldcablesupportd1":					result = assemblyData.AppurtList[selCmdIndex].ScaffoldCableSupportD1;					break;				case "scaffoldcablesupporte1":					result = assemblyData.AppurtList[selCmdIndex].ScaffoldCableSupportE1;					break;				case "scaffoldcablesupportf1":					result = assemblyData.AppurtList[selCmdIndex].ScaffoldCableSupportF1;					break;				case "scaffoldcablesupportg1":					result = assemblyData.AppurtList[selCmdIndex].ScaffoldCableSupportG1;					break;				case "scaffoldcablesupporth1":					result = assemblyData.AppurtList[selCmdIndex].ScaffoldCableSupportH1;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSAnchorBoltList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.AnchorBoltList[selCmdIndex].Size;					break;				case "boltdatad":					result = assemblyData.AnchorBoltList[selCmdIndex].BoltDataD;					break;				case "blotdatarootarea":					result = assemblyData.AnchorBoltList[selCmdIndex].BlotDataRootArea;					break;				case "blotdatamal":					result = assemblyData.AnchorBoltList[selCmdIndex].BlotdataMAL;					break;				case "type1al":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1aL;					break;				case "type1as":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1aS;					break;				case "type1ap":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1ap;					break;				case "type1ad1":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1ad1;					break;				case "type1aw":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1aw;					break;				case "type1at":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1at;					break;				case "type1bl":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1bL;					break;				case "type1bs":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1bs;					break;				case "type1bp":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1bp;					break;				case "type1by":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1by;					break;				case "type1br":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1bR;					break;				case "type1bd1":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1bd1;					break;				case "type1bw":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1bw;					break;				case "type1bt":					result = assemblyData.AnchorBoltList[selCmdIndex].Type1bt;					break;				case "type2l":					result = assemblyData.AnchorBoltList[selCmdIndex].Type2L;					break;				case "type2s":					result = assemblyData.AnchorBoltList[selCmdIndex].Type2s;					break;				case "type2p":					result = assemblyData.AnchorBoltList[selCmdIndex].Type2p;					break;				case "type2r":					result = assemblyData.AnchorBoltList[selCmdIndex].Type2R;					break;				case "type2x":					result = assemblyData.AnchorBoltList[selCmdIndex].Type2x;					break;				case "type2a2":					result = assemblyData.AnchorBoltList[selCmdIndex].Type2A2;					break;				case "type2b2":					result = assemblyData.AnchorBoltList[selCmdIndex].Type2B2;					break;				case "type3l":					result = assemblyData.AnchorBoltList[selCmdIndex].Type3L;					break;				case "type3s":					result = assemblyData.AnchorBoltList[selCmdIndex].Type3s;					break;				case "type3p":					result = assemblyData.AnchorBoltList[selCmdIndex].Type3p;					break;				case "type3n":					result = assemblyData.AnchorBoltList[selCmdIndex].Type3N;					break;				case "type3w":					result = assemblyData.AnchorBoltList[selCmdIndex].Type3w;					break;				case "type3t":					result = assemblyData.AnchorBoltList[selCmdIndex].Type3T;					break;				case "type3a2":					result = assemblyData.AnchorBoltList[selCmdIndex].Type3A2;					break;				case "type3b2":					result = assemblyData.AnchorBoltList[selCmdIndex].Type3B2;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSAnchorChairList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "size":					result = assemblyData.AnchorChairList[selCmdIndex].Size;					break;				case "a":					result = assemblyData.AnchorChairList[selCmdIndex].A;					break;				case "a1":					result = assemblyData.AnchorChairList[selCmdIndex].A1;					break;				case "b":					result = assemblyData.AnchorChairList[selCmdIndex].B;					break;				case "e":					result = assemblyData.AnchorChairList[selCmdIndex].E;					break;				case "f":					result = assemblyData.AnchorChairList[selCmdIndex].F;					break;				case "t":					result = assemblyData.AnchorChairList[selCmdIndex].T;					break;				case "t1":					result = assemblyData.AnchorChairList[selCmdIndex].T1;					break;				case "h":					result = assemblyData.AnchorChairList[selCmdIndex].H;					break;				case "i":					result = assemblyData.AnchorChairList[selCmdIndex].I;					break;				case "w":					result = assemblyData.AnchorChairList[selCmdIndex].W;					break;				case "p":					result = assemblyData.AnchorChairList[selCmdIndex].P;					break;				case "t2":					result = assemblyData.AnchorChairList[selCmdIndex].T2;					break;				case "a2":					result = assemblyData.AnchorChairList[selCmdIndex].A2;					break;				case "b1":					result = assemblyData.AnchorChairList[selCmdIndex].B1;					break;				case "c1":					result = assemblyData.AnchorChairList[selCmdIndex].C1;					break;				case "d1":					result = assemblyData.AnchorChairList[selCmdIndex].D1;					break;				case "e1":					result = assemblyData.AnchorChairList[selCmdIndex].E1;					break;				case "f1":					result = assemblyData.AnchorChairList[selCmdIndex].F1;					break;				case "g1":					result = assemblyData.AnchorChairList[selCmdIndex].G1;					break;				case "h1":					result = assemblyData.AnchorChairList[selCmdIndex].H1;					break;				case "j":					result = assemblyData.AnchorChairList[selCmdIndex].J;					break;				case "c":					result = assemblyData.AnchorChairList[selCmdIndex].C;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSFlangeEtcList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "gasketthickness":					result = assemblyData.FlangeEtcList[selCmdIndex].GasketThickness;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSFlangeOHFList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.FlangeOHFList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.FlangeOHFList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.FlangeOHFList[selCmdIndex].G;					break;				case "od":					result = assemblyData.FlangeOHFList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.FlangeOHFList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.FlangeOHFList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.FlangeOHFList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.FlangeOHFList[selCmdIndex].H;					break;				case "awn":					result = assemblyData.FlangeOHFList[selCmdIndex].AWN;					break;				case "aso":					result = assemblyData.FlangeOHFList[selCmdIndex].ASO;					break;				case "b":					result = assemblyData.FlangeOHFList[selCmdIndex].B;					break;				case "c":					result = assemblyData.FlangeOHFList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.FlangeOHFList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.FlangeOHFList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.FlangeOHFList[selCmdIndex].BoltSize2;					break;				case "boltlength":					result = assemblyData.FlangeOHFList[selCmdIndex].BoltLength;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSFlangeTHList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.FlangeTHList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.FlangeTHList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.FlangeTHList[selCmdIndex].G;					break;				case "od":					result = assemblyData.FlangeTHList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.FlangeTHList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.FlangeTHList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.FlangeTHList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.FlangeTHList[selCmdIndex].H;					break;				case "awn":					result = assemblyData.FlangeTHList[selCmdIndex].AWN;					break;				case "aso":					result = assemblyData.FlangeTHList[selCmdIndex].ASO;					break;				case "b":					result = assemblyData.FlangeTHList[selCmdIndex].B;					break;				case "c":					result = assemblyData.FlangeTHList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.FlangeTHList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.FlangeTHList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.FlangeTHList[selCmdIndex].BoltSize2;					break;				case "boltlength":					result = assemblyData.FlangeTHList[selCmdIndex].BoltLength;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSFlangeOHFSeriesAList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].G;					break;				case "od":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].H;					break;				case "a":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].A;					break;				case "bwn":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].BWN;					break;				case "bbf":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].BBF;					break;				case "c":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].BoltSize2;					break;				case "boltlengthwnbf":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].BoltLengthWNBF;					break;				case "boltlengthwnwn":					result = assemblyData.FlangeOHFSeriesAList[selCmdIndex].BoltLengthWNWN;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSFlangeTHSeriesAist(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].G;					break;				case "od":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].H;					break;				case "a":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].A;					break;				case "bwn":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].BWN;					break;				case "bbf":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].BBF;					break;				case "c":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].BoltSize2;					break;				case "boltlengthwnbf":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].BoltLengthWNBF;					break;				case "boltlengthwnwn":					result = assemblyData.FlangeTHSeriesAist[selCmdIndex].BoltLengthWNWN;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSFlangeOHFSeriesBList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].G;					break;				case "od":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].H;					break;				case "a":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].A;					break;				case "bwn":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].BWN;					break;				case "bbf":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].BBF;					break;				case "c":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].BoltSize2;					break;				case "boltlengthwnbf":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].BoltLengthWNBF;					break;				case "boltlengthwnwn":					result = assemblyData.FlangeOHFSeriesBList[selCmdIndex].BoltLengthWNWN;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSFlangeTHSeriesBist(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].G;					break;				case "od":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].H;					break;				case "a":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].A;					break;				case "bwn":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].BWN;					break;				case "bbf":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].BBF;					break;				case "c":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].BoltSize2;					break;				case "boltlengthwnbf":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].BoltLengthWNBF;					break;				case "boltlengthwnwn":					result = assemblyData.FlangeTHSeriesBist[selCmdIndex].BoltLengthWNWN;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSFlangeOHFLWNList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].G;					break;				case "od":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].H;					break;				case "b":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].B;					break;				case "c":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].BoltSize2;					break;				case "boltlength":					result = assemblyData.FlangeOHFLWNList[selCmdIndex].BoltLength;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSFlangeTHLWNList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.FlangeTHLWNList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.FlangeTHLWNList[selCmdIndex].NPS;					break;				case "g":					result = assemblyData.FlangeTHLWNList[selCmdIndex].G;					break;				case "od":					result = assemblyData.FlangeTHLWNList[selCmdIndex].OD;					break;				case "bcd":					result = assemblyData.FlangeTHLWNList[selCmdIndex].BCD;					break;				case "rrf":					result = assemblyData.FlangeTHLWNList[selCmdIndex].RRF;					break;				case "rff":					result = assemblyData.FlangeTHLWNList[selCmdIndex].RFF;					break;				case "h":					result = assemblyData.FlangeTHLWNList[selCmdIndex].H;					break;				case "b":					result = assemblyData.FlangeTHLWNList[selCmdIndex].B;					break;				case "c":					result = assemblyData.FlangeTHLWNList[selCmdIndex].C;					break;				case "boltno":					result = assemblyData.FlangeTHLWNList[selCmdIndex].BoltNo;					break;				case "boltsize1":					result = assemblyData.FlangeTHLWNList[selCmdIndex].BoltSize1;					break;				case "boltsize2":					result = assemblyData.FlangeTHLWNList[selCmdIndex].BoltSize2;					break;				case "boltlength":					result = assemblyData.FlangeTHLWNList[selCmdIndex].BoltLength;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSElbowList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "nps":					result = assemblyData.ElbowList[selCmdIndex].NPS;					break;				case "od":					result = assemblyData.ElbowList[selCmdIndex].OD;					break;				case "lra":					result = assemblyData.ElbowList[selCmdIndex].LRA;					break;				case "lrb":					result = assemblyData.ElbowList[selCmdIndex].LRB;					break;				case "lrc":					result = assemblyData.ElbowList[selCmdIndex].LRC;					break;				case "srd":					result = assemblyData.ElbowList[selCmdIndex].SRD;					break;				case "sre":					result = assemblyData.ElbowList[selCmdIndex].SRE;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSTeeList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "nps":					result = assemblyData.TeeList[selCmdIndex].NPS;					break;				case "od":					result = assemblyData.TeeList[selCmdIndex].OD;					break;				case "a":					result = assemblyData.TeeList[selCmdIndex].A;					break;				case "b":					result = assemblyData.TeeList[selCmdIndex].B;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSReducerList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "nps":					result = assemblyData.ReducerList[selCmdIndex].NPS;					break;				case "od1":					result = assemblyData.ReducerList[selCmdIndex].OD1;					break;				case "od2":					result = assemblyData.ReducerList[selCmdIndex].OD2;					break;				case "h":					result = assemblyData.ReducerList[selCmdIndex].H;					break;				case "a":					result = assemblyData.ReducerList[selCmdIndex].A;					break;				default:					result = "nothing";					break;			}			return result;		}		private string GetTMSUBoltList(string selCmdStr, string selCmdNew, int selCmdIndex)		{			string result = "";			switch (selCmdStr)			{				case "dn":					result = assemblyData.UBoltList[selCmdIndex].DN;					break;				case "nps":					result = assemblyData.UBoltList[selCmdIndex].NPS;					break;				case "supportangle":					result = assemblyData.UBoltList[selCmdIndex].SupportAngle;					break;				case "d1d2":					result = assemblyData.UBoltList[selCmdIndex].D1D2;					break;				case "r":					result = assemblyData.UBoltList[selCmdIndex].R;					break;				case "p":					result = assemblyData.UBoltList[selCmdIndex].P;					break;				case "q":					result = assemblyData.UBoltList[selCmdIndex].Q;					break;				case "typeah":					result = assemblyData.UBoltList[selCmdIndex].TypeAH;					break;				case "typeae":					result = assemblyData.UBoltList[selCmdIndex].TypeAE;					break;				case "typebh":					result = assemblyData.UBoltList[selCmdIndex].TypeBH;					break;				case "typebe":					result = assemblyData.UBoltList[selCmdIndex].TypeBE;					break;				case "s":					result = assemblyData.UBoltList[selCmdIndex].S;					break;				case "d3":					result = assemblyData.UBoltList[selCmdIndex].D3;					break;				default:					result = "nothing";					break;			}			return result;		}		#endregion	}}
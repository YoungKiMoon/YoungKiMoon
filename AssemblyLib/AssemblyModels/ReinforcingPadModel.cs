using AssemblyLib.Utils;using System;using System.Collections.Generic;using System.Collections.ObjectModel;using System.Linq;using System.Text;using System.Threading.Tasks;namespace AssemblyLib.AssemblyModels{	public class ReinforcingPadModel : Notifier	{		public ReinforcingPadModel()		{					Pipe = "";			OD = "";			DR = "";			L = "";			W = "";			J = "";			Hn = "";			CMin = "";			edgeR = "";			TelltaleHoldeD = "";			A3 = "";			B3 = "";			C3 = "";		}				private string _Pipe;		public string Pipe			{				get { return _Pipe; }				set				{					_Pipe = value;					OnPropertyChanged(nameof(Pipe));				}			}				private string _OD;		public string OD			{				get { return _OD; }				set				{					_OD = value;					OnPropertyChanged(nameof(OD));				}			}				private string _DR;		public string DR			{				get { return _DR; }				set				{					_DR = value;					OnPropertyChanged(nameof(DR));				}			}				private string _L;		public string L			{				get { return _L; }				set				{					_L = value;					OnPropertyChanged(nameof(L));				}			}				private string _W;		public string W			{				get { return _W; }				set				{					_W = value;					OnPropertyChanged(nameof(W));				}			}				private string _J;		public string J			{				get { return _J; }				set				{					_J = value;					OnPropertyChanged(nameof(J));				}			}				private string _Hn;		public string Hn			{				get { return _Hn; }				set				{					_Hn = value;					OnPropertyChanged(nameof(Hn));				}			}				private string _CMin;		public string CMin			{				get { return _CMin; }				set				{					_CMin = value;					OnPropertyChanged(nameof(CMin));				}			}				private string _edgeR;		public string edgeR			{				get { return _edgeR; }				set				{					_edgeR = value;					OnPropertyChanged(nameof(edgeR));				}			}				private string _TelltaleHoldeD;		public string TelltaleHoldeD			{				get { return _TelltaleHoldeD; }				set				{					_TelltaleHoldeD = value;					OnPropertyChanged(nameof(TelltaleHoldeD));				}			}				private string _A3;		public string A3			{				get { return _A3; }				set				{					_A3 = value;					OnPropertyChanged(nameof(A3));				}			}				private string _B3;		public string B3			{				get { return _B3; }				set				{					_B3 = value;					OnPropertyChanged(nameof(B3));				}			}				private string _C3;		public string C3			{				get { return _C3; }				set				{					_C3 = value;					OnPropertyChanged(nameof(C3));				}			}			}}
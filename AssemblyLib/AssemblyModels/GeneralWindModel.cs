using AssemblyLib.Utils;using System;using System.Collections.Generic;using System.Collections.ObjectModel;using System.Linq;using System.Text;using System.Threading.Tasks;namespace AssemblyLib.AssemblyModels{	public class GeneralWindModel : Notifier	{		public GeneralWindModel()		{					CodeApplied = "";			DesignWindSpeed = "";			Exposure = "";			ImportanceFactor = "";			TerrainCategory = "";			RoofPressureCoefficient = "";			ShellPressureCoefficient = "";		}				private string _CodeApplied;		public string CodeApplied			{				get { return _CodeApplied; }				set				{					_CodeApplied = value;					OnPropertyChanged(nameof(CodeApplied));				}			}				private string _DesignWindSpeed;		public string DesignWindSpeed			{				get { return _DesignWindSpeed; }				set				{					_DesignWindSpeed = value;					OnPropertyChanged(nameof(DesignWindSpeed));				}			}				private string _Exposure;		public string Exposure			{				get { return _Exposure; }				set				{					_Exposure = value;					OnPropertyChanged(nameof(Exposure));				}			}				private string _ImportanceFactor;		public string ImportanceFactor			{				get { return _ImportanceFactor; }				set				{					_ImportanceFactor = value;					OnPropertyChanged(nameof(ImportanceFactor));				}			}				private string _TerrainCategory;		public string TerrainCategory			{				get { return _TerrainCategory; }				set				{					_TerrainCategory = value;					OnPropertyChanged(nameof(TerrainCategory));				}			}				private string _RoofPressureCoefficient;		public string RoofPressureCoefficient			{				get { return _RoofPressureCoefficient; }				set				{					_RoofPressureCoefficient = value;					OnPropertyChanged(nameof(RoofPressureCoefficient));				}			}				private string _ShellPressureCoefficient;		public string ShellPressureCoefficient			{				get { return _ShellPressureCoefficient; }				set				{					_ShellPressureCoefficient = value;					OnPropertyChanged(nameof(ShellPressureCoefficient));				}			}			}}